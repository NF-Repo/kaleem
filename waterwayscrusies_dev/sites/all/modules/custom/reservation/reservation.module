<?php

/**
 * Implements hook_menu().
 */


class Reservation{
	public $ticketsData;
	public $enhancementsData;
	public $eventid;
	public $orderid;
	public $uid;
	public $data;
	
	
	/*
	 * Reservation Data
	 */
	public static function getReservationData($order_id){
		$result='';
		try{
			$result = db_select('reservation', 'c')
			->fields('c')
			->condition('orderid', $order_id, '=')
			->execute();
		}catch(Exception $e){
			
		}
		return $result;
	}
	
	
	
	//************************ Tickets ************************************************
	public static function getReservationTicketData($order_id){
		$result=Reservation::getReservationData($order_id);
		
		foreach ($result as $value) {
			$eventid = $value->eventid;
			$orderid = $value->orderid;
			$ordercreatedfor = $value->uid;
			$orderbookedby = $value->bookedby;
			$bookeddate = $value->bookingdate;
			$itemsobj = unserialize($value->data);
		}
		
		foreach ($itemsobj->userchoice as $key => $datavalue) {
			if ($key == 'cruiseproduct') {
				$ticketsData = $datavalue['producttickets'];
			}
		}
		
		return $ticketsData;
	}
	
	
	
	
	

	
	
	public static function reservation_get_ticket_actual_price($ticketid,$order_id){
		$ticketData=Reservation::getReservationTicketData($order_id);
		$price='';
		foreach($ticketData as $ticket){
			if($ticket['ticketid']==$ticketid){
				$price=$ticket['price'];
				break;
			}
		}
		return $price;
	}
	
	
	public static function reservation_get_ticket_custom_price($ticketid,$order_id){
		$ticketData=Reservation::getReservationTicketData($order_id);
	
		$price='';
		foreach($ticketData as $ticket){
			if($ticket['ticketid']==$ticketid){
				$price=$ticket['price'];
				break;
			}
		}
		return $price;
	}
	
	
	public static function reservation_get_ticket_qty($ticketid,$order_id){
		$ticketData=Reservation::getReservationTicketData($order_id);
		$qty='';
		foreach($ticketData as $ticket){
			if($ticket['ticketid']==$ticketid){
				$qty=$ticket['qty'];
				break;
			}
		}
		return $qty;
	}
	
	
	public static function reservation_get_ticket_entrees($ticketid,$order_id){
		$ticketData=Reservation::getReservationTicketData($order_id);
		$entrees='';
		foreach($ticketData as $ticket){
			if($ticket['ticketid']==$ticketid){
				$entrees[]=$ticket['ticketentreeids'];
				break;
			}
		}
		return $entrees;
	}
	
	
	public static function reservation_get_ticket_entree_comments($ticketid,$order_id){
		$ticketData=Reservation::getReservationTicketData($order_id);
		$entreecomments='';
		foreach($ticketData as $ticket){
			if($ticket['ticketid']==$ticketid){
				$entreecomments[]=$ticket['ticketentreescomments'];
				break;
			}
		}
		return $entreecomments;
	}
	
	
	
	
	
	
	//************************ Enhancements ************************************************
	public static function getReservationEnhancementsData($order_id){
		$result=Reservation::getReservationData($order_id);
		foreach ( $result as $value ) {
			$eventid = $value->eventid;
			$orderid = $value->orderid;
			$ordercreatedfor = $value->uid;
			$orderbookedby = $value->bookedby;
			$bookeddate = $value->bookingdate;
			$itemsobj = unserialize ( $value->data );
		}
		foreach ( $itemsobj->userchoice as $key => $datavalue ) {
			if ($key == 'enhacementproducts') {
			 	$enhancementsData = $datavalue;
			}
		}
		return $enhancementsData;
	}
	
	public static function getReservationEnhancementsDataByGroup($order_id){
	    $result=Reservation::getReservationData($order_id);
	    foreach ( $result as $value ) {
	        $eventid = $value->eventid;
	        $orderid = $value->orderid;
	        $ordercreatedfor = $value->uid;
	        $orderbookedby = $value->bookedby;
	        $bookeddate = $value->bookingdate;
	        $itemsobj = unserialize ( $value->data );
	    }
	    foreach ( $itemsobj->userchoice as $key => $datavalue ) {
	        if ($key == 'enhacementproducts') {
	            foreach ($datavalue as $envalue) {
	                $enhancementsData[$envalue['enhancedproductnodeid']]=$envalue;
	            }
	        }
	    }
	    return $enhancementsData;
	}
	
	
	public static function reservation_get_enhancement_comment($enhancedproductnodeid,$order_id){
		$enhancementsData=Reservation::getReservationEnhancementsData($order_id);
		$comments='';
		foreach($enhancementsData as $enhancement){
			if($enhancement['enhancedproductnodeid']==$enhancedproductnodeid){
				$comments=$enhancement['comments'];
				break;
			}
		}
		return $comments;
	}
	
	
	public static function reservation_get_enhancement_actual_price($enhancedproductnodeid,$order_id){
		$enhancementsData=Reservation::getReservationEnhancementsData($order_id);
		$price='';
		foreach($enhancementsData as $enhancement){
			if($enhancement['enhancedproductnodeid']==$enhancedproductnodeid){
				$price=$enhancement['price'];
				break;
			}
		}
		return $price;
	}
	
	
	public static function reservation_get_enhancement_custom_price($enhancedproductnodeid,$order_id){
		$enhancementsData=Reservation::getReservationEnhancementsData($order_id);
		$price='';
		foreach($enhancementsData as $enhancement){
			if($enhancement['enhancedproductnodeid']==$enhancedproductnodeid){
				$price=$enhancement['customprice'];
				break;
			}
		}
		return $price;
	}
	
	
	public static function reservation_get_enhancement_qty($enhancedproductnodeid,$order_id){
		$enhancementsData=Reservation::getReservationEnhancementsData($order_id);
		$qty='';
		foreach($enhancementsData as $enhancement){
			if($enhancement['enhancedproductnodeid']==$enhancedproductnodeid){
				$qty=$enhancement['qty'];
				break;
			}
		}
		return $qty;
	}
	
	
	
	//************************ Comments ************************************************
	public static function getReservationCommentsData($order_id) {
		$result = Reservation::getReservationData ( $order_id );
		foreach ( $result as $value ) {
			$eventid = $value->eventid;
			$orderid = $value->orderid;
			$ordercreatedfor = $value->uid;
			$orderbookedby = $value->bookedby;
			$bookeddate = $value->bookingdate;
			$itemsobj = unserialize ( $value->data );
		}
		return $itemsobj;
	}
	
	
	public static function reservation_get_ticketspage_comments($order_id){
		$data=Reservation::getReservationCommentsData($order_id);
	
		$ticketspagedata=array();;
		foreach ( $data->userchoice as $key => $datavalue ) {
			if ($key == 'specialinstructions') {
				$ticketspagedata  = $datavalue;
				break;
			}
		}
		return $ticketspagedata;
	}
	
	 //************************ Complete reservation ************************************************
 public static function getCompleteReservationData($order_id){
  $result=Reservation::getReservationData($order_id);
  foreach ( $result as $value ) {
   $eventid = $value->eventid;
   $orderid = $value->orderid;
   $ordercreatedfor = $value->uid;
   $orderbookedby = $value->bookedby;
   $bookeddate = $value->bookingdate;
   $itemsobj = unserialize ( $value->data );
                        $value->serializedata=$itemsobj;
  }
  
  return $value;
 }
	public static function reservation_get_enhancementspage_comments($order_id){
		$data=Reservation::getReservationCommentsData($order_id);
		$enhancementspagedata=array();;
		foreach ( $data->userchoice as $key => $datavalue ) {
			if ($key == 'celebrationtext') {
				$enhancementspagedata  = $datavalue;
				break;
			}
		}
		return $enhancementspagedata;
	}
	
	
	public static function reservation_get_user_personal_information($order_id){
		$data=Reservation::getReservationCommentsData($order_id);
		$userdata=array();;
		foreach ( $data->userchoice as $key => $datavalue ) {
			if ($key == 'usersdata') {
				$userdata  = $datavalue;
				break;
			}
		}
		return $userdata;
	}
	
	
	public static function reservation_by($order_id){
	    $userrole='';
	    $result=Reservation::getReservationData($order_id);
	    $object=$result->fetchObject();
	    $userrole=$object->bookedby;
	    return $userrole;
	}
	
	public static function reservation_get_eventid($order_id){
	    $eventid='';
	    $result=Reservation::getReservationData($order_id);
	    $object=$result->fetchObject();
	    $eventid=$object->eventid;
	    return $eventid;
	}
	
	
	public static function reservation_get_cruisetemplateid($order_id){
	    $eventid=Reservation::reservation_get_eventid($order_id);
	    
	    $result='';
	    try{
	        $result = db_select('scheduledevents', 's')
	        ->fields('s',array('cruisetemplate_id'))
	        ->condition('id', $eventid, '=')
	        ->execute()->fetchField();
	    }catch(Exception $e){
	        	
	    }
	    return $result;
	}
	
	//Check orders is booking order or not
	public static function reservation_is_booking_order($order_id){
		$result=false;
		$result=Reservation::getReservationData($order_id);
		$object=$result->fetchObject();
		return isset($object->orderid) ? true : false;
	
	}
	
	
}




function reservation_menu() {
  //Admin Management for Request Quote

  $items['reservation'] = array(
      'title' => 'Waterways Cruise Event Booking',
      'page callback' => 'reservation_list_view',
      'access arguments' => array('view reservation entity'),
  );

  $items['admin/structure/reservation/manage'] = array(
      'title' => 'Reservation Booking Administration',
      'description' => 'Manage Reservation Booking system Structure',
      'page callback' => 'reservation_admin_page',
      'access arguments' => array('administer Reservation entities'),
  );

  //Detailed View for Request Quote
  $items['reservation/%reservation'] = array(
      'title callback' => 'reservation_page_title',
      'title arguments' => array(1),
      'page callback' => 'reservation_page_view',
      'page arguments' => array(1),
      'access arguments' => array('view reservation entities'),
      'type' => MENU_CALLBACK,
  );


  //Request Quote View
  $items['reservation/%reservation/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );


  //Request Quote Edit
  $items['reservation/%reservation/edit'] = array(
      'title' => 'Edit',
      'load arguments' => array('reservation'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'reservation_item_edit',
      'access arguments' => array('edit reservation entities'),
      'page arguments' => array(1),
  );

  //Request Quote Add
  $items['reservation/add'] = array(
      'title' => 'Add reservation',
      'page callback' => 'reservation_add',
      'access arguments' => array('create reservation entities'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function reservation_permission() {
  return array(
      'administer reservation entities' => array(
          'title' => t('Administer reservation entities'),
          'restrict access' => TRUE,
      ),
      'view reservation entities' => array(
          'title' => t('View reservation Entities'),
      ),
      'create reservation entities' => array(
          'title' => t('Create reservation Entities'),
      ),
  );
}

/**
 * Implements hook_entity_info().
 */
function reservation_entity_info() {
  $reservation_info['reservation'] = array(
      'label' => t('reservation Entity'),
      'controller class' => 'reservationController',
      'base table' => 'reservation',
      'uri callback' => 'reservation_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
      ),
      'static cache' => TRUE,
      'bundles' => array(
          'reservation_bundle' => array(
              'label' => 'reservation',
              'admin' => array(
                  'path' => 'admin/structure/reservation/manage',
                  'access arguments' => array('administer reservation entities'),
              ),
          ),
      ),
      'view modes' => array(
          'full' => array(
              'label' => t('Full'),
              'custom settings' => FALSE,
          ),
      )
  );
  return $reservation_info;
}

function reservation_page_title($reservation) {
  return 'Waterways Cruise Events Bookings';
}

function reservation_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $reservation = reservation_load_multiple($ids, array(), $reset);
  return $reservation ? reset($reservation) : FALSE;
}

function reservation_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('reservation', $ids, $conditions, $reset);
}

function reservation_uri($basic) {
  return array(
      'path' => 'reservation/' . $reservation->id,
  );
}

function reservation_admin_page() {
  $output = 'Admin page for reservation entities.<br/>';
  //There is no reservation add system
  $output .= '<a href="#">Add reservation entity</a>';

  return $output;
}

//List View

/**
 * Returns a render array with all userdocuments entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function reservation_list_view() {
  global $user;

//    drupal_add_css(drupal_get_path('module', 'reservation') . '/userdocuments.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
//    drupal_add_js(drupal_get_path('module', 'userdocuments') . '/js/userdocuments.js');
  // Initialising output
  $output = '';
  // Table header
  $header = array(
      array('data' => 'Id', 'field' => 'id'),
      array('data' => 'Booking ID', 'field' => 'orderid'),
      array('data' => 'Booking Date', 'field' => 'bookingdate'),
       array('data' => 'Bookedby', 'field' => 'bookedby'),
      array('data' => 'Created Date', 'field' => 'created'),
      array('data' => 'Actions'),
  );
  // Setting the sort conditions
  if (isset($_GET['sort']) && isset($_GET['order'])) {
    // Sort it Ascending or Descending?
    if ($_GET['sort'] == 'asc')
      $sort = 'ASC';
    else
      $sort = 'DESC';

    // Which column will be sorted
  } else {
    $sort = 'ASC';
    $order = 'id';
  }


  $query = db_select("reservation", "n");

  // Adding fields
  $query->fields('n', array('id', 'orderid', 'bookingdate','bookedby', 'created'));

  // Set order by
  $query->orderBy($order, $sort);
  // Pagination
  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);
  // Executing query
  $result = $query->execute();
//    $pageurl = drupal_get_destination();
  // Looping for filling the table rows

  while ($data = $result->fetchObject()) {
    // Adding the rows
    $rows[] = array(
        $data->id,
        $data->orderid,
        $data->bookingdate,
        $data->bookedby,
        date('m-d-Y', $data->created),
        '<a href="' . $data->id . '">View</a>'
    );
  }
  //Setting the output of the field
  $output .= theme_table(
                  array(
                      'header' => $header,
                      'rows' => $rows,
                      'attributes' => array('class' => array('table table-striped table-bordered')),
                      'sticky' => true,
                      'caption' => '',
                      'colgroups' => array(),
                      'empty' => t("No Records!") //The message to be displayed if table is empty
                  )
          ) . theme('pager');



  return $output;
}

//end of List_view
//Entity page view

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function reservation_page_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'reservation';
  // Start setting up the content.
  $entity->content = array(
      '#view_mode' => $view_mode,
  );

  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  //RequestQuote Id
  $entity->content['id'] = array(
      '#type' => 'item',
      '#title' => t('id'),
      '#markup' => $entity->id,
  );

  $entity->content['orderid'] = array(
      '#type' => 'item',
      '#title' => t('Bookingid'),
      '#markup' => $entity->orderid,
  );

  $entity->content['bookingdate'] = array(
      '#type' => 'item',
      '#title' => t('Booking Date'),
      '#markup' => $entity->bookingdate,
  );

  $entity->content['bookedby'] = array(
      '#type' => 'item',
      '#title' => t('Booked By'),
      '#markup' => $entity->bookedby,
  );


  //EventType Values 
  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  

  // And finally return the content.
  return $entity->content;
}

//Entity Page view gets 

function reservation_item_edit($reservation) {

  drupal_set_title(t('<em>Edit reservation entity</em> @title', array('@title' =>
      'RequestQuote')), PASS_THROUGH);
  return drupal_get_form('reservation_add_form', $reservation);
}

function reservation_add() {
  $reservation = (object) array(
              'bookingdate' => '', //Values which are in saparated by comma.
              'orderid' => '',
              'uid'=>'',
              'bookedby' => '',
              'data' => '',
              'created' => REQUEST_TIME
  );

  return drupal_get_form('reservation_add_form', $reservation);
}

function reservation_add_form($form, &$form_state, $reservation) {

  if (isset($reservation->id) && ($reservation->id != null)) {
    $form['id'] = array(
        '#type' => 'hidden',
        '#title' => t('id'),
        '#default_value' => $reservation->id,
        '#required' => TRUE,
    );
  }
  else {
    $form['created'] = array(
        '#type' => 'hidden',
        '#title' => t('created'),
        '#default_value' => $reservation->created,
    );
  }

  $form['bookingdate'] = array(
      '#type' => 'textfield',
      '#title' => t('Booking date'),
      '#default_value' => $reservation->bookingdate,
      '#required' => TRUE,
  );

  $form['orderid'] = array(
      '#type' => 'textfield',
      '#title' => t('Booking Id'),
      '#default_value' => $reservation->orderid,
      '#required' => TRUE,
  );
  
   $form['uid'] = array(
      '#type' => 'textfield',
      '#title' => t('User Id'),
      '#default_value' => $reservation->uid,
      '#required' => TRUE,
  );

  $form['bookedby'] = array(
      '#type' => 'textfield',
      '#title' => t('Booked By'),
      '#default_value' => $reservation->bookedby,
      '#required' => TRUE,
  );

  $form['data'] = array(
      '#type' => 'textfield',
      '#title' => t('Data'),
      '#default_value' => $reservation->data,
      '#required' => TRUE,
  );

  field_attach_form('reservation', $reservation, $form, $form_state);
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 100,
  );
  return $form;
}

function reservation_field_extra_fields() {
  $form_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  //Event Type
  $form_elements['bookingdate'] = array(
      'label' => t('bookingdate'),
      'description' => t('bookingdate (an extra form field)'),
      'weight' => -5,
  );
  $form_elements['orderid'] = array(
      'label' => t('orderid'),
      'description' => t('orderid (an extra form field)'),
      'weight' => -5,
  );
  
   $form_elements['uid'] = array(
      'label' => t('uid'),
      'description' => t('uid (an extra form field)'),
      'weight' => -5,
  );  
  $form_elements['bookedby'] = array(
      'label' => t('bookedby'),
      'description' => t('bookedby (an extra form field)'),
      'weight' => -5,
  );
//   
  $form_elements['data'] = array(
      'label' => t('data'),
      'description' => t('data (an extra form field)'),
      'weight' => -5,
  );

  $display_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  //Booking Date
  $display_elements['bookingdate'] = array(
      'label' => t('bookingdate'),
      'description' => t('bookingdate (an extra form field)'),
      'weight' => -5,
  );
  $display_elements['orderid'] = array(
      'label' => t('orderid'),
      'description' => t('orderid (an extra form field)'),
      'weight' => -5,
  );
  
   $display_elements['uid'] = array(
      'label' => t('uid'),
      'description' => t('uid (an extra form field)'),
      'weight' => -5,
  );
 
  $display_elements['bookedby'] = array(
      'label' => t('bookedby'),
      'description' => t('bookedby (an extra form field)'),
      'weight' => -5,
  );
  
  $display_elements['data'] = array(
      'label' => t('data'),
      'description' => t('data (an extra form field)'),
      'weight' => -5,
  );


  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['reservation']['reservation_bundle']['form'] = $form_elements;
  $extra_fields['reservation']['reservation_bundle']['display'] = $display_elements;

  return $extra_fields;
}

function reservation_add_form_validate($form, &$form_state) {
  $reservation_submission = (object) $form_state['values'];
  field_attach_form_validate('reservation', $reservation_submission, $form, $form_state);
}

function reservation_add_form_submit($form, &$form_state) {
  $reservation_submission = (object) $form_state['values'];
  field_attach_submit('reservation', $reservation_submission, $form, $form_state);
  $reservation = reservation_save($reservation_submission);
  $form_state['redirect'] = 'reservation/' . $reservation->id;
}

function reservation_save(&$reservation) {

  return entity_get_controller('reservation')->save($reservation);
}

class reservationController extends DrupalDefaultEntityController {

  public function save($reservation) {
    if (isset($reservation->id) && ($reservation->id != null)) {
      drupal_write_record('reservation', $reservation, array('id'));
      field_attach_update('reservation', $reservation);
    }
    else {
      drupal_write_record('reservation', $reservation);
      field_attach_insert('reservation', $reservation);
    }
    module_invoke_all('entity_insert', $reservation, 'reservation');
        return $reservation;
  }

}
