<?php

/**
 * Implements hook_menu().
 */
function requestquote_menu() {
    //Admin Management for Request Quote

    $items['requestquote'] = array(
        'title' => 'Request a Proposal',
        'page callback' => 'requestquote_list_form',
        'access arguments' => array('view requestquote entity'),
    );

    $items['admin/structure/requestquote/manage'] = array(
        'title' => 'Request Quote Admin',
        'description' => 'Manage Request Quote Structure',
        'page callback' => 'requestquote_admin_page',
        'access arguments' => array('administer Request Quote entities'),
    );

    //Detailed View for Request Quote
    $items['requestquote/%requestquote'] = array(
        'title callback' => 'requestquote_page_title',
        'title arguments' => array(1),
        'page callback' => 'requestquote_page_view',
        'page arguments' => array(1),
        'access arguments' => array('view requestquote entities'),
        'type' => MENU_CALLBACK,
    );


    //Request Quote View
    $items['requestquote/%requestquote/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );


    //Request Quote Edit
    $items['requestquote/%requestquote/edit'] = array(
        'title' => 'Edit',
        'load arguments' => array('requestquote'),
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'requestquote_item_edit',
        'access arguments' => array('edit requestquote entities'),
        'page arguments' => array(1),
    );

    //Request Quote Add
    $items['requestquote/add'] = array(
        'title' => 'Add requestquote',
        'page callback' => 'requestquote_add',
        'access arguments' => array('create requestquote entities'),
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function requestquote_permission() {
    return array(
        'administer requestquote entities' => array(
            'title' => t('Administer requestquote entities'),
            'restrict access' => TRUE,
        ),
        'view requestquote entities' => array(
            'title' => t('View requestquote Entities'),
        ),
        'create requestquote entities' => array(
            'title' => t('Create requestquote Entities'),
        ),
        'view requestquote entity' => array(
            'title' => t('view requestquote entity'),
        ),
    );
}

/**
 * Implements hook_entity_info().
 */
function requestquote_entity_info() {
    $requestquote_info['requestquote'] = array(
        'label' => t('requestquote Entity'),
        'controller class' => 'requestquoteController',
        'base table' => 'requestquote',
        'uri callback' => 'requestquote_uri',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
        ),
        'static cache' => TRUE,
        'bundles' => array(
            'requestquote_bundle' => array(
                'label' => 'requestquote',
                'admin' => array(
                    'path' => 'admin/structure/requestquote/manage',
                    'access arguments' => array('administer requestquote entities'),
                ),
            ),
        ),
        'view modes' => array(
            'full' => array(
                'label' => t('Full'),
                'custom settings' => FALSE,
            ),
        )
    );
    return $requestquote_info;
}

function requestquote_page_title($requestquote) {
    return 'Request Quote';
}

function requestquote_load($id = NULL, $reset = FALSE) {
    $ids = (isset($id) ? array($id) : array());
    $requestquote = requestquote_load_multiple($ids, array(), $reset);
    return $requestquote ? reset($requestquote) : FALSE;
}

function requestquote_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('requestquote', $ids, $conditions, $reset);
}

function requestquote_uri($basic) {
    return array(
        'path' => 'requestquote/' . $requestquote->id,
    );
}

function requestquote_admin_page() {
    $output = 'Admin page for requestquote entities.<br/>';
    $output .= '<a href="/community/add">Add requestquote entity</a>';

    return $output;
}

//List View

/**
 * Returns a render array with all userdocuments entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function requestquote_list_form() {
    return drupal_render(drupal_get_form('requestquote_list_view'));
}

function requestquote_list_view($form, &$form_state) {
    global $user;
    global $base_url;
    drupal_add_css(drupal_get_path('module', 'requestquote') . '/requestquote.css');
$viewhtml='';
    if (isset($_GET['requestquote_startdate']['date'])) {
        $requestquote_startdate = '';
        $requestquote_starttime = '';
        if ($_GET['requestquote_startdate']['date'] != '') {
            $requestquote_startdate = $_GET['requestquote_startdate']['date'];
            $requestquote_starttime = strtotime($requestquote_startdate . " 00:00:00");
            $viewhtml.='requestquote_startdate[date]='.$requestquote_startdate;
        }
        
    }
    if (isset($_GET['requestquote_enddate']['date'])) {
        $requestquote_enddate = '';
        $requestquote_endtime = '';
        if ($_GET['requestquote_enddate']['date'] != '') {
            $requestquote_enddate = $_GET['requestquote_enddate']['date'];
            $requestquote_endtime = strtotime($requestquote_enddate . " 23:59:59");
            if($viewhtml !=''){
                $viewhtml.='&requestquote_enddate[date]='.$requestquote_enddate;
            }else{
                $viewhtml.='requestquote_enddate[date]='.$requestquote_enddate;
            }            
        }
    }


//    $html = '<div class="row-fluid"><div class="span12">'
//            . '<a style="color:#0088CC;text-decoration:none;" href="' . $base_url . '/node/add/blog">Excel Export Request Proposal List</a>'
//            .
//            '</div></div>';

    $form['#method'] = 'get';

    $form['requestquote_startdate'] = array(
        '#id' => 'requestquotestart_date',
        '#type' => 'date_popup',
        '#date_format' => 'Y-m-d',
        '#title' => t(''),
        '#title_display' => 'invisible',
        '#default_value' => isset($requestquote_startdate) ? $requestquote_startdate : '',
        '#description' => '',
        '#attributes' => array('class' => array('dateFieldStyle dateFieldMedium'), 'placeholder' => array('Start Date')),
        '#prefix' => '<div class="row-fluid"><div class="span12"><div class="pull-left">',
        '#suffix' => '</div>',
    );

    $form['requestquote_enddate'] = array(
        '#id' => 'requestquoteend_date',
        '#type' => 'date_popup',
        '#date_format' => 'Y-m-d',
        '#title' => t(''),
        '#title_display' => 'invisible',
        '#default_value' => isset($requestquote_enddate) ? $requestquote_enddate : '',
        '#description' => '',
        '#attributes' => array('class' => array('dateFieldStyle dateFieldMedium'), 'placeholder' => array('End Date')),
        '#prefix' => '<div class="pull-left">',
        '#suffix' => '</div>',
    );

    $form['results'] = array(
        '#type' => 'submit',
        '#name' => 'search_btn',
        '#value' => 'Search',
        '#prefix' => '<div class="pull-left" style="padding:13px;">',
        '#suffix' => '</div>',
    );

    $form['export_request proposals'] = array(
        '#name' => 'export_btn',
        '#type' => 'submit',
        '#value' => t('Export'),
        '#submit' => array('request_proposals_export'),
        '#prefix' => '<div class="pull-left" style="padding:13px;">',
        '#suffix' => '</div>',
    );


    if (isset($_GET['requestquote_startdate']['date']) || isset($_GET['requestquote_enddate']['date'])) {
        $form['clear_export_list'] = array(
            '#name' => 'clear_btn',
            '#type' => 'submit',
            '#value' => t('Clear'),
            '#submit' => array('clear_export'),
            '#prefix' => '<div class="pull-left" style="padding:13px;">',
        '#suffix' => '</div></div></div>',
    );
    }



    if (isset($_GET['export_btn'])) {

        request_proposals_export($_GET);
    }


    if (isset($_GET['clear_btn'])) {
        clear_export($_GET);
    }


//    drupal_add_css(drupal_get_path('module', 'requestquote') . '/userdocuments.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
//    drupal_add_js(drupal_get_path('module', 'userdocuments') . '/js/userdocuments.js');
    // Initialising output
    $output = '';
    // Table header
    $header = array(
        array('data' => 'Id', 'field' => 'id'),
        array('data' => 'First Name', 'field' => 'firstName'),
        array('data' => 'Last Name', 'field' => 'lastName'),
        array('data' => 'Created Date', 'field' => 'created'),
        array('data' => 'Actions'),
    );
    // Setting the sort conditions


    if (isset($_GET ['sort']) && isset($_GET ['order'])) {
        if ($_GET ['sort'] == 'asc')
            $sort = 'ASC';
        else
            $sort = 'DESC';

        switch ($_GET ['order']) {
            case 'Id' :
                $order = 'id';
                break;
        }
    } else {
        $sort = 'DESC';
        $order = 'created';
    }



    $query = db_select("requestquote", "n");

    // Adding fields
    $query->fields('n', array('id', 'firstName', 'lastName', 'created'));

    // Set order by
    $query->orderBy($order, $sort);
    /* Filteration of Records between certain Date Range */

    if ($requestquote_starttime != '' && $requestquote_endtime != '') {
        if ($requestquote_starttime < $requestquote_endtime != '') {
            $requestquote_enddate = $requestquote_enddate . " 23:59:59";
            $requestquote_startdate = $requestquote_startdate . " 00:00:00";
            $query->where("n.created >= UNIX_TIMESTAMP('$requestquote_startdate') and n.created <= UNIX_TIMESTAMP('$requestquote_enddate')");
        } else {
            drupal_set_message("End date must be Greater than start date");
        }
    }
    // Pagination
    $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);
    // Executing query
    $result = $query->execute();
//    $pageurl = drupal_get_destination();
    // Looping for filling the table rows

    while ($data = $result->fetchObject()) {
        $viewbtn='';
        if($viewhtml !=''){
            $viewbtn='<a href="' . $base_url . '/requestquote/' . $data->id . '?'.$viewhtml.'">view </a>';
        }else{
            $viewbtn='<a href="' . $base_url . '/requestquote/' . $data->id .'">view </a>';
        }
        // Adding the rows
        $rows[] = array(
            $data->id,
            $data->firstName,
            $data->lastName,
            date('m-d-Y', $data->created),
            $viewbtn,
        );
    }
    //Setting the output of the field
    $output .= theme_table(
                    array(
                        'header' => $header,
                        'rows' => $rows,
                        'attributes' => array('class' => array('table table-striped table-bordered')),
                        'sticky' => true,
                        'caption' => '',
                        'colgroups' => array(),
                        'empty' => t("No Records!") //The message to be displayed if table is empty
                    )
            ) . theme('pager');



    $form['outputmarkup'] = array(
        '#type' => 'markup',
        '#markup' => $output
    );
    return $form;
}

//end of List_view
//Entity page view

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function requestquote_page_view($entity, $view_mode = 'tweaky') {

    
drupal_add_css(drupal_get_path('module', 'requestquote') . '/requestquote.css');
    global $base_url;

    // Our entity type, for convenience.
    $entity_type = 'requestquote';
    // Start setting up the content.
    $entity->content = array(
        '#view_mode' => $view_mode,
    );

    // Build fields content - this is where the Field API really comes in to play.
    // The task has very little code here because it all gets taken care of by
    // field module.
    // field_attach_prepare_view() lets the fields load any data they need
    // before viewing.
    field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);
    // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
    // for us.
    entity_prepare_view($entity_type, array($entity->id => $entity));
    // Now field_attach_view() generates the content for the fields.
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);

    // OK, Field API done, now we can set up some of our own data.
    //RequestQuote Id
//  
    $paramshtml='';
    if(isset($_GET['requestquote_startdate']['date']) && $_GET['requestquote_startdate']['date']!=''){
        $paramshtml.='?requestquote_startdate[date]='.$_GET['requestquote_startdate']['date'];
    }
    if(isset($_GET['requestquote_enddate']['date']) && $_GET['requestquote_enddate']['date']!=''){
        if($paramshtml!=''){
            $paramshtml.='&requestquote_enddate[date]='.$_GET['requestquote_enddate']['date'];
        }else{
            $paramshtml.='?requestquote_enddate[date]='.$_GET['requestquote_enddate']['date'];
        }        
    }

    $html = '<div class="row-fluid"><div class="span12">'
            . '<a class="backlinkclass" style="color:#0088CC;text-decoration:none; font-size:15px;" href="' . $base_url . '/requestquote'.$paramshtml.'">Back</a>'
            .
            '</div></div>';


    $htmlcontent = array(
        '#type' => 'item',
        '#markup' => $html,
    );

    $eventTypeArrayList = explode(',', $entity->eventType);


    if (in_array('EventTypeOther', $eventTypeArrayList)) {
        $eventTypeArrayList[] = $entity->eventTypeOther;
    }

    $u_eventTypeArrayList = array();
    foreach ($eventTypeArrayList as $eventtype) {
        if ($eventtype == "EventTypeOther") {
            
        } else {
            $u_eventTypeArrayList[] = $eventtype;
        }
    }
    $eventList = implode(',', $u_eventTypeArrayList);
    if (isset($eventList)) {
        $entity->content['eventType'] = array(
            '#type' => 'item',
            '#title' => t('Type of Event:'),
            '#markup' =>  $eventList,
          '#attributes' => array('class' => array('form-inline'))
             
        );
    }

    if ($entity->preferedtochareter == 'privateYacht') {
        $myselectionevnt = "I prefer to charter a private yacht for my event.";
    } else if ($entity->preferedtochareter == 'hostEventAboard') {
        $myselectionevnt = "I can host my event aboard a scheduled dining cruise.";
    } else {
        $myselectionevnt = "";
    }

    $entity->content['preferedtochareter'] = array(
        '#type' => 'item',
//        '#title' => t('Event Selection'),
        '#markup' => $myselectionevnt,
    );
    $entity->content['company'] = array(
        '#type' => 'item',
        '#title' => t('Company:'),
        '#markup' => $entity->company,
    );
    $entity->content['firstName'] = array(
        '#type' => 'item',
        '#title' => t('First Name:'),
        '#markup' => $entity->firstName,
    );

    $entity->content['lastName'] = array(
        '#type' => 'item',
        '#title' => t('Last Name:'),
        '#markup' => $entity->lastName,
    );

    $entity->content['email'] = array(
        '#type' => 'item',
        '#title' => t('Email:'),
        '#markup' => $entity->email,
    );

    $preferredtocontact = explode(',', $entity->preferedtocontact);

    if ($preferredtocontact != "") {
        if (in_array('preferdphone', $preferredtocontact) && in_array('preferedemail', $preferredtocontact)) {
            $contactthrough = "Phone and Email";
        } else if (in_array('preferdphone', $preferredtocontact)) {
            $contactthrough = "Phone";
        } else if (in_array('preferedemail', $preferredtocontact)) {
            $contactthrough = "Email";
        } else {
            $contactthrough = "";
        }
    }



    $entity->content['preferedtocontact'] = array(
        '#type' => 'item',
        '#title' => t('I prefer to be contacted via:'),
        '#markup' => $contactthrough,
    );
    $entity->content['phoneNumber'] = array(
        '#type' => 'item',
        '#title' => t('Phone Number:'),
        '#markup' => $entity->phoneNumber,
    );


    $entity->content['bestTimetoCall'] = array(
        '#type' => 'item',
        '#title' => t('Best time to call?'),
        '#markup' => $entity->bestTimetoCall,
    );
    $entity->content['preferredDateofEvent'] = array(
        '#type' => 'item',
        '#title' => t('Your preferred date of the event?'),
        '#markup' => $entity->preferredDateofEvent,
    );
    $entity->content['preferredTimeofEvent'] = array(
        '#type' => 'item',
        '#title' => t('Your preferred time of the event:'),
        '#markup' => $entity->preferredTimeofEvent,
        
    );



    $entity->content['noOfGuests'] = array(
        '#type' => 'item',
        '#title' => t('Estimated number of guests:'),
        '#markup' => $entity->noOfGuests,
    );
    $entity->content['noOfGuests'] = array(
        '#type' => 'item',
        '#title' => t('Estimated No of Guests:'),
        '#markup' => $entity->noOfGuests,
    );
//    $entity->content['preferedvenue'] = array(
//        '#type' => 'item',
//        '#title' => t('Your preferred venue?'),
//        '#markup' => $entity->preferedvenue,
//    );

    $entity->content['estimatedbudget'] = array(
        '#type' => 'item',
        '#title' => t('Estimated Budget:'),
        '#markup' => $entity->estimatedbudget,
    );
    $entity->content['findusby'] = array(
        '#type' => 'item',
        '#title' => t('How did you find out about us?'),
        '#markup' => $entity->findusby,
    );





    if ($entity->specialEmailRequired == 1) {
        $speciarequierdemail = 'yes';
    } else {
        $speciarequierdemail = 'No';
    }

    $entity->content['specialEmailRequired'] = array(
        '#type' => 'item',
        '#title' => t('I would like to receive Waterways specials by email:'),
        '#markup' => $speciarequierdemail,
    );
    
    $entity->content['usercomment'] = array(
        '#type' => 'item',
        '#title' => t('Comments:'),
        '#markup' => $entity->usercomment,
    );

    $entity->content['created'] = array(
        '#type' => 'item',
        '#title' => t('Created Date:'),
        '#markup' => date('m-d-Y', $entity->created),
    );


    //EventType Values 
    // Now to invoke some hooks. We need the language code for
    // hook_entity_view(), so let's get that.
    global $language;
    $langcode = $language->language;
    // And now invoke hook_entity_view().
    module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
    // Now invoke hook_entity_view_alter().
    drupal_alter(array('userdocuments_view', 'entity_view'), $entity->content, $entity_type);

    // And finally return the content.
    return array($htmlcontent, $entity->content);
}

//Entity Page view gets 

function requestquote_item_edit($requestquote) {

    drupal_set_title(t('<em>Edit requestquote entity</em> @title', array('@title' =>
        'RequestQuote')), PASS_THROUGH);
    return drupal_get_form('requestquote_add_form', $requestquote);
}

function requestquote_add() {
    $requestquote = (object) array(
                'eventType' => '', //Values which are in saparated by comma.
                'eventTypeOther' => '',
                'firstName' => '',
                'lastName' => '',
                'email' => '',
                'phoneNumber' => '',
                'company' => '',
                'bestTimetoCall' => '',
                'preferredDateofEvent' => '',
                'preferredTimeofEvent' => '',
                'noOfGuests' => '',
                'findusby' => '',
                'preferedvenue' => '',
                'specialEmailRequired' => '',
                'usercomment' => '',
                'created' => REQUEST_TIME
    );

    return drupal_get_form('requestquote_add_form', $requestquote);
}

function requestquote_add_form($form, &$form_state, $requestquote) {

    if (isset($requestquote->id) && ($requestquote->id != null)) {
        $form['id'] = array(
            '#type' => 'hidden',
            '#title' => t('id'),
            '#default_value' => $requestquote->id,
            '#required' => TRUE,
        );
    } else {
        $form['created'] = array(
            '#type' => 'hidden',
            '#title' => t('created'),
            '#default_value' => $requestquote->created,
        );
    }

    $form['eventType'] = array(
        '#type' => 'textfield',
        '#title' => t('eventType'),
        '#default_value' => $requestquote->eventType,
        '#required' => TRUE,
    );

    $form['eventTypeOther'] = array(
        '#type' => 'textfield',
        '#title' => t('eventTypeOther'),
        '#default_value' => $requestquote->eventTypeOther,
        '#required' => TRUE,
    );

    $form['firstName'] = array(
        '#type' => 'textfield',
        '#title' => t('firstName'),
        '#default_value' => $requestquote->firstName,
        '#required' => TRUE,
    );

    $form['lastName'] = array(
        '#type' => 'textfield',
        '#title' => t('lastName'),
        '#default_value' => $requestquote->lastName,
        '#required' => TRUE,
    );


    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('email'),
        '#default_value' => $requestquote->email,
        '#required' => TRUE,
    );

    $form['phoneNumber'] = array(
        '#type' => 'textfield',
        '#title' => t('phoneNumber'),
        '#default_value' => $requestquote->phoneNumber,
        '#required' => TRUE,
    );


    $form['company'] = array(
        '#type' => 'textfield',
        '#title' => t('company'),
        '#default_value' => $requestquote->company,
        '#required' => TRUE,
    );


    $form['bestTimetoCall'] = array(
        '#type' => 'textfield',
        '#title' => t('bestTimetoCall'),
        '#default_value' => $requestquote->bestTimetoCall,
        '#required' => TRUE,
    );

    $form['preferredDateofEvent'] = array(
        '#type' => 'textfield',
        '#title' => t('preferredDateofEvent'),
        '#default_value' => $requestquote->preferredDateofEvent,
        '#required' => TRUE,
    );
    $form['preferredTimeofEvent'] = array(
        '#type' => 'textfield',
        '#title' => t('PreferredTimeofEvent'),
        '#default_value' => $requestquote->preferredTimeofEvent,
        '#required' => TRUE,
    );
    $form['noOfGuests'] = array(
        '#type' => 'textfield',
        '#title' => t('noOfGuests'),
        '#default_value' => $requestquote->noOfGuests,
        '#required' => TRUE,
    );
    $form['findusby'] = array(
        '#type' => 'textfield',
        '#title' => t('findusby'),
        '#default_value' => $requestquote->findusby,
        '#required' => TRUE,
    );

    $form['preferedvenue'] = array(
        '#type' => 'textfield',
        '#title' => t('preferedvenue'),
        '#default_value' => $requestquote->preferedvenue,
        '#required' => TRUE,
    );


    $form['specialEmailRequired'] = array(
        '#type' => 'textfield',
        '#title' => t('specialEmailRequired'),
        '#default_value' => $requestquote->specialEmailRequired,
        '#required' => TRUE,
    );
    $form['usercomment'] = array(
        '#type' => 'textfield',
        '#title' => t('usercomment'),
        '#default_value' => $requestquote->usercomment,
        '#required' => TRUE,
    );
    field_attach_form('requestquote', $requestquote, $form, $form_state);
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#weight' => 100,
    );
    return $form;
}

function request_proposals_export($params) {


    if (isset($params['requestquote_startdate']['date'])) {
        $requestquote_startdate = '';
        $requestquote_starttime = '';
        if ($params['requestquote_startdate']['date'] != '') {
            $requestquote_startdate = $params['requestquote_startdate']['date'];
            $requestquote_starttime = strtotime($requestquote_startdate . " 00:00:00");
        }
    }
    if (isset($params['requestquote_enddate']['date'])) {
        $requestquote_enddate = '';
        $requestquote_endtime = '';
        if ($params['requestquote_enddate']['date'] != '') {
            $requestquote_enddate = $params['requestquote_enddate']['date'];
            $requestquote_endtime = strtotime($requestquote_enddate . " 23:59:59");
        }
    }

    $header = array(
        0 => 'Id',
        1 => 'Type of Event',
        2 => 'Event Selection',
        3 => 'Company',
        4 => 'First Name',
        5 => 'Last Name',
        6 => 'Email',
        7 => 'I prefer to be contacted via',
        8 => 'Phone Number',
        9 => 'Best time to call?',
        10 => 'Your preferred date of the event?',
        11 => 'Your preferred time of the event',
        12 => 'Estimated number of guests',
        13 => 'Your preferred venue?',
        14 => 'Estimated Budget',
        15 => 'How did you find out about us?',
        16 => 'I would like to receive Waterways specials by email.',
        17 => 'Comments',
        18 => 'Created'
    );
    $query = db_select("requestquote", "r");
    $query->fields('r', array('id',
        'firstName',
        'lastName',
        'created',
        'preferedtochareter',
        'email',
        'phoneNumber',
        'company',
        'bestTimetoCall',
        'eventType',
        'eventTypeOther',
        'preferredDateofEvent',
        'preferredTimeofEvent',
        'preferedvenue',
        'specialEmailRequired',
        'usercomment',
        'preferedtocontact',
        'estimatedbudget',
        'noOfGuests',
        'findusby'
            )
    );


    if ($requestquote_starttime != '' && $requestquote_endtime != '') {
        if ($requestquote_starttime < $requestquote_endtime != '') {
            $requestquote_enddate = $requestquote_enddate . " 23:59:59";
            $requestquote_startdate = $requestquote_startdate . " 00:00:00";
            $query->where("r.created >= UNIX_TIMESTAMP('$requestquote_startdate') and r.created <= UNIX_TIMESTAMP('$requestquote_enddate')");
        } else {
            drupal_set_message("End date must be Greater than start date");
        }
    }
    $result = $query->execute()->fetchAll();


    global $base_url;
    $rows = array();
//     $rows[] = array(t('#Id'), t('Name'), t('Email'), t('Phone'), t('Orders'), t('Products'), t('Total Amount'));
    if (count($result) > 0) {
        for ($i = 0; $i < count($result); $i ++) {


            $preferredtocontact = explode(',', $result[$i]->preferedtocontact);

            if ($preferredtocontact != "") {
                if (in_array('preferdphone', $preferredtocontact) && in_array('preferedemail', $preferredtocontact)) {
                    $contactthrough = "Phone and Email";
                } else if (in_array('preferdphone', $preferredtocontact)) {
                    $contactthrough = "Phone";
                } else if (in_array('preferedemail', $preferredtocontact)) {
                    $contactthrough = "Email";
                } else {
                    $contactthrough = "";
                }
            }



            if ($result[$i]->specialEmailRequired == 1) {
                $specialemailrequired = "Yes";
            } else {
                $specialemailrequired = "No";
            }


            if ($result [$i]->preferedtochareter == 'privateYacht') {
                $myselectionevnt = "I prefer to charter a private yacht for my event.";
            } else if ($result [$i]->preferedtochareter == 'hostEventAboard') {
                $myselectionevnt = "I can host my event aboard a scheduled dining cruise.";
            } else {
                $myselectionevnt = "";
            }


            $eventTypeArrayList = explode(',', $result[$i]->eventType);


            if (in_array('EventTypeOther', $eventTypeArrayList)) {
                $eventTypeArrayList[] = $result[$i]->eventTypeOther;
            }

            $u_eventTypeArrayList = array();
            foreach ($eventTypeArrayList as $eventtype) {
                if ($eventtype == "EventTypeOther") {
                    
                } else {
                    $u_eventTypeArrayList[] = $eventtype;
                }
            }
            $eventList = implode(',', $u_eventTypeArrayList);

            $rows [] = array(
                $result [$i]->id,
                $eventList,
                $myselectionevnt,
                $result [$i]->company,
                $result [$i]->firstName,
                $result [$i]->lastName,
                $result [$i]->email,
                $contactthrough,
                $result [$i]->phoneNumber,
                $result [$i]->bestTimetoCall,
                $result [$i]->preferredDateofEvent,
                $result [$i]->preferredTimeofEvent,
                $result [$i]->noOfGuests,
                $result [$i]->preferedvenue,
                $result [$i]->estimatedbudget,
                $result [$i]->findusby,
                $specialemailrequired,
                $result [$i]->usercomment,
                date('m-d-Y', $result [$i]->created),
            );
        }
    }

    excel_export_data('Request Proposal', $header, $rows);
}

function clear_export($params) {

    $path = 'requestquote';
    drupal_goto($path);
}

function requestquote_field_extra_fields() {
    $form_elements['id'] = array(
        'label' => t('id'),
        'description' => t('id (an extra form field)'),
        'weight' => -5,
    );
    //Event Type
    $form_elements['EventTypes'] = array(
        'label' => t('EventTypes'),
        'description' => t('eventTypes (an extra form field)'),
        'weight' => -5,
    );
    $form_elements['eventTypeOther'] = array(
        'label' => t('eventTypeOther'),
        'description' => t('eventTypeOther (an extra form field)'),
        'weight' => -5,
    );
    //
//   
    $form_elements['firstName'] = array(
        'label' => t('firstName'),
        'description' => t('firstName (an extra form field)'),
        'weight' => -5,
    );
//   
    $form_elements['lastName'] = array(
        'label' => t('lastName'),
        'description' => t('lastName (an extra form field)'),
        'weight' => -5,
    );

//    
    $form_elements['email'] = array(
        'label' => t('email'),
        'description' => t('email (an extra form field)'),
        'weight' => -5,
    );
//      
    $form_elements['phoneNumber'] = array(
        'label' => t('phoneNumber'),
        'description' => t('phoneNumber (an extra form field)'),
        'weight' => -5,
    );

//     
    $form_elements['company'] = array(
        'label' => t('company'),
        'description' => t('company (an extra form field)'),
        'weight' => -5,
    );

    //bestTimetoCall
    $form_elements['preferredDateofEvent'] = array(
        'label' => t('preferredDateofEvent'),
        'description' => t('preferredDateofEvent (an extra form field)'),
        'weight' => -5,
    );
    //
    //
         $form_elements['preferredTimeofEvent'] = array(
        'label' => t('preferredTimeofEvent'),
        'description' => t('preferredTimeofEvent (an extra form field)'),
        'weight' => -5,
    );
    //
    $form_elements['noOfGuests'] = array(
        'label' => t('noOfGuests'),
        'description' => t('noOfGuests (an extra form field)'),
        'weight' => -5,
    );
    //
    $form_elements['findusby'] = array(
        'label' => t('findusby'),
        'description' => t('findusby (an extra form field)'),
        'weight' => -5,
    );

    $form_elements['preferedvenue'] = array(
        'label' => t('preferedvenue'),
        'description' => t('preferedvenue (an extra form field)'),
        'weight' => -5,
    );


    //
    $form_elements['specialEmailRequired'] = array(
        'label' => t('specialEmailRequired'),
        'description' => t('specialEmailRequired (an extra form field)'),
        'weight' => -5,
    );
//
    $form_elements['usercomment'] = array(
        'label' => t('usercomment'),
        'description' => t('usercomment (an extra form field)'),
        'weight' => -5,
    );


    //
//    

    $display_elements['id'] = array(
        'label' => t('id'),
        'description' => t('id (an extra form field)'),
        'weight' => -5,
    );
    //Event Type
    $display_elements['EventTypes'] = array(
        'label' => t('EventTypes'),
        'description' => t('eventTypes (an extra form field)'),
        'weight' => -5,
    );
    $display_elements['eventTypeOther'] = array(
        'label' => t('eventTypeOther'),
        'description' => t('eventTypeOther (an extra form field)'),
        'weight' => -5,
    );
    //
//   
    $display_elements['firstName'] = array(
        'label' => t('firstName'),
        'description' => t('firstName (an extra form field)'),
        'weight' => -5,
    );
//   
    $display_elements['lastName'] = array(
        'label' => t('lastName'),
        'description' => t('lastName (an extra form field)'),
        'weight' => -5,
    );

//    
    $display_elements['email'] = array(
        'label' => t('email'),
        'description' => t('email (an extra form field)'),
        'weight' => -5,
    );
//      
    $display_elements['phoneNumber'] = array(
        'label' => t('phoneNumber'),
        'description' => t('phoneNumber (an extra form field)'),
        'weight' => -5,
    );

//     
    $display_elements['company'] = array(
        'label' => t('company'),
        'description' => t('company (an extra form field)'),
        'weight' => -5,
    );

    //bestTimetoCall
    $display_elements['preferredDateofEvent'] = array(
        'label' => t('preferredDateofEvent'),
        'description' => t('preferredDateofEvent (an extra form field)'),
        'weight' => -5,
    );


    $display_elements['preferredTimeofEvent'] = array(
        'label' => t('preferredTimeofEvent'),
        'description' => t('preferredTimeofEvent (an extra form field)'),
        'weight' => -5,
    );

    $display_elements['noOfGuests'] = array(
        'label' => t('noOfGuests'),
        'description' => t('noOfGuests (an extra form field)'),
        'weight' => -5,
    );

    $display_elements['findusby'] = array(
        'label' => t('findusby'),
        'description' => t('findusby (an extra form field)'),
        'weight' => -5,
    );


    $display_elements['preferedvenue'] = array(
        'label' => t('preferedvenue'),
        'description' => t('preferedvenue (an extra form field)'),
        'weight' => -5,
    );



    $display_elements['specialEmailRequired'] = array(
        'label' => t('specialEmailRequired'),
        'description' => t('specialEmailRequired (an extra form field)'),
        'weight' => -5,
    );

    $display_elements['usercomment'] = array(
        'label' => t('usercomment'),
        'description' => t('usercomment (an extra form field)'),
        'weight' => -5,
    );


    // Since we have only one bundle type, we'll just provide the extra_fields
    // for it here.
    $extra_fields['requestquote']['requestquote_bundle']['form'] = $form_elements;
    $extra_fields['requestquote']['requestquote_bundle']['display'] = $display_elements;

    return $extra_fields;
}

function requestquote_add_form_validate($form, &$form_state) {
    $requestquote_submission = (object) $form_state['values'];
    field_attach_form_validate('requestquote', $requestquote_submission, $form, $form_state);
}

function requestquote_add_form_submit($form, &$form_state) {
    $requestquote_submission = (object) $form_state['values'];
    field_attach_submit('requestquote', $requestquote_submission, $form, $form_state);
    $requestquote = requestquote_save($requestquote_submission);
    $form_state['redirect'] = 'requestquote/' . $requestquote->id;
}

function requestquote_save(&$requestquote) {

    return entity_get_controller('requestquote')->save($requestquote);
}

class requestquoteController extends DrupalDefaultEntityController {

    public function save($requestquote) {
        if (isset($requestquote->id) && ($requestquote->id != null)) {
            drupal_write_record('requestquote', $requestquote, array('id'));
            field_attach_update('requestquote', $requestquote);
        } else {
            drupal_write_record('requestquote', $requestquote);
            field_attach_insert('requestquote', $requestquote);
        }
        module_invoke_all('entity_insert', $requestquote, 'requestquote');



        //Sending Email the RequestQuote Details
        $to = SiteConfiguration::getRfp();
        
        $params = array(
            'subject' => t('WWC Request Quote'),
            'body' => t("Data"),
            'formdata' => $requestquote,
        );
        
        drupal_mail("email_system", "wwc_requestquote", $to, language_default(), $params, $to);
//    drupal_json_output('success');
        //End of Send Email The RequestQuote Details


        return $requestquote;
    }

}
