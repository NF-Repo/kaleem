<?php

class Cruise {

    public static function getLayout($id) {
        $result = 0;
        try {
            $query = db_select('cruise', 'c');
            $query->fields('c', array('menu_layout'));
            $query->condition('id', $id, '=');
            $result = $query->execute()->fetchField();
        } catch (Exception $e) {
            
        }
        return (int) $result;
    }

    public static function getCourseName($id) {
        $result = '';
        try {
            $query = db_select('cruise_course_list', 'c');
            $query->fields('c', array('course_name'));
            $query->condition('id', $id, '=');
            $result = $query->execute()->fetchField();
        } catch (Exception $e) {
            
        }
        return $result;
    }

    public static function getCruiseTicketEntreeDetails($ticketid, $cruisetemplateid) {
        $result = false;
        try {
            $query = db_select('cruise_template_tickets', 'c');
            $query->fields('c');
            $query->condition('cruisetemplateid', $cruisetemplateid, '=');
            $query->condition('ticketid', $ticketid, '=');
            $result = $query->execute()->fetchObject();
        } catch (Exception $e) {
            watchdog('Cruise Module', $e);
        }
        return $result;
    }

    public static function getTicketEntrees($ticketid, $cruisetemplateid) {
        $result = '';
        try {
            $query = db_select('cruise_template_tickets', 'c');
            $query->fields('c', array('entreeids'));
            $query->condition('cruisetemplateid', $cruisetemplateid, '=');
            $query->condition('ticketid', $ticketid, '=');
            $serializedTicketEntrees = $query->execute()->fetchField();

            if ($serializedTicketEntrees) {
                $ticketEntreeIDSArr = unserialize($serializedTicketEntrees);
            }

            $ticketEnreeData = array();
            //$ticketEnreeData = array('' => '--Select--');
            foreach ($ticketEntreeIDSArr as $entreeid) {
                $query = db_select('cruiseentrees', 'c');
                $query->fields('c');
                $query->condition('id', $entreeid, '=');
                $entreeObject = $query->execute()->fetchObject();
                $ticketEnreeData[$entreeObject->id] = $entreeObject->title;
            }
        } catch (Exception $e) {
            
        }
        return $ticketEnreeData;
    }

}

/**
 * Implements hook_menu().
 */
function cruise_menu() {

    // Cruise Table List View
    $items ['cruise'] = array(
        'title' => 'Cruise Templates',
        'page callback' => 'cruise_list_view',
        'access arguments' => array(
            'view cruise entity'
        )
    );

    // Adding New
    $items ['cruise/add'] = array(
        'title' => 'Add Cruise Template',
        'page callback' => 'cruise_add',
        'access arguments' => array(
            'create cruise entities'
        ),
        'file' => 'cruise.form.inc'
    );

    // Insert subitems into the edit node page for product types.
    // Edit Cruise
    $items ['cruise/%cruise/edit'] = array(
        'title' => 'Edit',
        'load arguments' => array(
            'cruise'
        ),
        'type' => MENU_LOCAL_TASK,
        'weight' => -8,
        'page callback' => 'cruise_item_edit',
        'access arguments' => array(
            'edit cruise entities'
        ),
        'page arguments' => array(
            1
        ),
        'access callback' => TRUE,
        'file' => 'cruise.form.inc'
    );


    $items['cruise/%cruise/edit/cruiselistview'] = array(
        'title' => 'List',
        'load arguments' => array(
            'cruise'
        ),
        'type' => MENU_LOCAL_TASK,
        'weight' => 6,
        'page callback' => 'edit_cruise_list_view',
        'access callback' => TRUE,
            //'file' => 'cruise.form.inc' ,
    );



    $items ['cruise/%cruise/edit/cruise'] = array(
        'title' => 'Edit',
        'load arguments' => array(
            'cruise'
        ),
        'type' => MENU_LOCAL_TASK,
        'weight' => 5,
        'page callback' => 'cruise_item_edit',
        'access arguments' => array(
            'edit cruise entities'
        ),
        'page arguments' => array(
            1
        ),
        'access callback' => TRUE,
        'file' => 'cruise.form.inc'
    );





    $items['cruise/%cruise/edit/enhancements'] = array(
        'title' => 'Enhancements',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cruise_enhancements_assign_form', 1),
        'access callback' => TRUE,
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'cruise.admin.inc',
    );

    $items['cruise/%cruise/edit/fees'] = array(
        'title' => 'Fees',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cruisefee_update_form', 1),
        'access callback' => TRUE,
        'access arguments' => array(1),
        'weight' => 2,
        'type' => MENU_LOCAL_TASK,
        'file' => 'cruisefee.inc',
    );


    $items['cruise/%cruise/edit/tickets'] = array(
        'title' => 'Tickets',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cruise_tickets_assign_form', 1),
        'access callback' => TRUE,
        'access arguments' => array(1),
        'weight' => 4,
        'type' => MENU_LOCAL_TASK,
        'file' => 'cruise.admin.inc',
    );

//    $items['cruise/%cruise/edit/discounts'] = array(
//        'title' => 'Discounts',
//        'page callback' => 'drupal_get_form',
//        'page arguments' => array('cruise_dsicount_assign_form', 1),
//        'access callback' => TRUE,
//        'access arguments' => array(1),
//        'weight' => -13,
//        'type' => MENU_LOCAL_TASK,
//        'file' => 'cruise.admin.inc',
//    );
//	
//	$items['cruise/%cruise/edit/fees'] = array(
//			'title' => 'Fees',
//// 			'page callback' => 'cruise_fee_assignement',
//			'page callback' => 'drupal_get_form',
//			'page arguments' => array('cruise_fee_assignement_form', 1),
//// 			'page arguments' => array(1),
//			'access callback' =>TRUE,
//			'access arguments' => array(1),
//			'weight' =>-14,
//			'type' => MENU_LOCAL_TASK,
//// 			'file' => 'cruise.admin.inc',
//	);
//	
//	
    // Delete Cruise
    $items ['cruise/%/delete'] = array(
        'page callback' => 'cruise_item_delete',
        'access arguments' => array(
            'delete cruise entities'
        ),
        'page arguments' => array(
            1
        ),
        'file' => 'cruise.form.inc'
    );





    // Manage Cruise through Admin Panel
    $items ['admin/structure/cruise/manage'] = array(
        'title' => 'Cruise Templates',
        'description' => 'Manage Cruise',
        'page callback' => 'cruise_templates_page',
        'access arguments' => array(
            'administer cruise entities'
        ),
    		'file'=>'inc/viewcruisetemplates.inc'
    );


// 	$items['coursedelete/%'] = array(
// 			'page callback' => 'course_entry_delete',
// 			'page arguments' => array(1),
// 			'access arguments' => array('access content'),
// 			'type' => MENU_CALLBACK,
// 			'file' => 'cruise.form.inc'
// 	);








    return $items;
}

//laxmi file deletes start

/**
 * Implementation of FileField's hook_file_update().
 *
 * This gets called after the file has been saved, and technically right AFTER writing to the database.
 * That's why we need to call drupal_write_record() to update the file record.
 * Too bad we can't use D7's file_save() :(
 */
function cruise_file_insert($file) {


    $file->filename = strtolower($file->filename);
//    $file->filename = preg_replace('/[^a-z0-9 -]+/', '', $file->filename);
    $file->filename = preg_replace('/[^A-Za-z0-9\s.\s-]/', '', $file->filename);

    $file->filename = str_replace(' ', '-', $file->filename);
    $file->filename = trim($file->filename, '-');





    // change filename to <timestamp>_<filename> for absolute uniqueness, and replace spaces with '_'
    $new_filename = $file->timestamp . '_' . str_replace(' ', '_', $file->filename);




    $new_filepath = dirname($file->destination) . '//' . $new_filename;
    // $file is passed by reference
    if (file_move($file, $new_filepath)) {


//        echo $file->uri;
        $url = $file->uri;
        $urlarr = explode('/', $url);
        $filename = end($urlarr);

        $urlarr[count($urlarr) - 1] = $new_filename;
        $newfilename = implode('/', $urlarr);
        $file->uri = $newfilename;
        $file->filename=$new_filename;
//        var_dump($file->uri);
//        exit();
        file_save($file);
        // update files table with new file information
        drupal_write_record('files', $file, 'fid');
    };
}

/**
 * Implementation of FileField's hook_file_update().
 */
// function cruise_file_update(&$file) {
//     if (!empty($file->fid)) {
// //    cruise_file_delete($file);
// //    cruise_file_insert($file);
//     }
// }

/**
 * Implementation of FileField's hook_file_delete().
 */
function cruise_file_delete($file) {
    // add any special delete processing here
}

//laxmi file deletes
//cruise list view
function edit_cruise_list_view() {
    $path = "admin/structure/cruise/manage";
    drupal_goto($path);
}

/**
 * Implement theme function
 * 
 * 
 */
function cruise_theme() {


    $items['cruise_fee_assignement_table'] = array(
        'render element' => 'element'
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function cruise_permission() {
    return array(
        'administer cruise entities' => array(
            'title' => t('Administer cruise entities'),
            'restrict access' => TRUE
        ),
        'view cruise entities' => array(
            'title' => t('View cruise Entities')
        ),
        'create cruise entities' => array(
            'title' => t('Create cruise Entities')
        ),
        'delete cruise entities' => array(
            'title' => t('Delete cruise Entities')
        ),
        'edit cruise entities' => array(
            'title' => t('Edit cruise Entities')
        )
    );
}

/**
 * Implements hook_entity_info().
 */
function cruise_entity_info() {
    $cruise_info ['cruise'] = array(
        'label' => 'Cruise',
        'controller class' => 'CruiseController',
        'base table' => 'cruise',
        'uri callback' => 'cruise_uri',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id'
        ),
        'static cache' => TRUE,
        'bundles' => array(
            'cruise_bundle' => array(
                'label' => 'cruise',
                'admin' => array(
                    'path' => 'admin/structure/cruise/manage',
                    'access arguments' => array(
                        'administer cruise entities'
                    )
                )
            )
        ),
        'view modes' => array(
            'full' => array(
                'label' => t('Full'),
                'custom settings' => FALSE
            )
        )
    );
    return $cruise_info;
}

function cruise_page_title($cruise) {
    return 'Cruise Template';
}

function cruise_load($id = NULL, $reset = FALSE) {
    $ids = (isset($id) ? array(
                $id
                    ) : array());
    $cruise = cruise_load_multiple($ids, array(), $reset);
    return $cruise ? reset($cruise) : FALSE;
}

function cruise_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('cruise', $ids, $conditions, $reset);
}

function cruise_uri($cruise) {
    return array(
        'path' => 'cruise/' . $cruise->id
    );
}

function cruise_item_delete($id) {
    $msg = '';
    try {
        cruise_delete($id);
        $msg = 'Cruise Deleted Successfully.';
    } catch (Exception $e) {
        $msg = 'Operation Failed.';
    }
    drupal_set_message($msg);
    drupal_goto('admin/structure/cruise/manage');
}

function cruise_admin_page() {
    // $output = 'Admin page for cruise entities.<br/>';
    $output = '';
    $output .= '<a href="' . base_path() . 'cruise/add">Add Cruise Template</a>';
    $output .= cruise_list_view();
    return $output;
}

function cruise_page_view($entity, $view_mode = 'tweaky') {

    // var_dump($entity);
    $entity_type = 'cruise';
    $entity->content = array(
        '#view_mode' => $view_mode
    );

    field_attach_prepare_view($entity_type, array(
        $entity->id => $entity
            ), $view_mode);
    entity_prepare_view($entity_type, array(
        $entity->id => $entity
    ));
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);
    $entity->content ['id'] = array(
        '#type' => 'item',
        '#title' => t('id'),
        '#markup' => $entity->id
    );

    $entity->content ['cruise_title'] = array(
        '#type' => 'item',
        '#title' => t('Cruise Title'),
        '#value' => $entity->cruise_title
    );

    $entity->content ['calendar_tag'] = array(
        '#type' => 'item',
        '#title' => t('Calendar Tag'),
        '#value' => $entity->calendar_tag
    );

    $entity->content ['cruise_type'] = array(
        '#type' => 'item',
        '#title' => t('Cruise Type'),
        '#value' => $entity->cruise_type
    );

    global $language;
    $langcode = $language->language;
    module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
    // drupal_alter(array('userdocuments_view', 'entity_view'), $entity->content, $entity_type);
    return $entity->content;
}

function cruise_item_edit($cruise) {
    drupal_set_title(t('Update Cruise Template @title', array(
        '@title' => ''
            )), PASS_THROUGH);
    $currentwindowid = time();
    $cruise->currentwindowid = $currentwindowid;
    if (isset($cruise->id) && $cruise->id != '') {
        $cruise->currentwindowid = $cruise->id;
    }
    return drupal_get_form('cruise_add_form', $cruise);
}

function cruise_field_extra_fields() {
    $form_elements ['id'] = array(
        'label' => t('Auto ID'),
        'description' => t('Text'),
        'weight' => - 5
    );

    $display_elements ['id'] = array(
        'label' => t('Auto ID'),
        'description' => t('Text'),
        'weight' => - 5
    );

    $form_elements ['cruise_title'] = array(
        'label' => t('Cruise Title'),
        'description' => t('Text'),
        'weight' => - 5
    );

    $display_elements ['cruise_title'] = array(
        'label' => t('Cruise Title'),
        'description' => t('Text'),
        'weight' => - 5
    );
    $form_elements ['calendar_tag'] = array(
        'label' => t('Calendar Tag'),
        'description' => t('Text'),
        'weight' => - 5
    );

    $display_elements ['calendar_tag'] = array(
        'label' => t('Calendar Tag'),
        'description' => t('Text'),
        'weight' => - 5
    );

    $form_elements ['cruise_type'] = array(
        'label' => t('Cruise Type'),
        'description' => t('Text'),
        'weight' => - 5
    );

    $display_elements ['cruise_type'] = array(
        'label' => t('Cruise Type'),
        'description' => t('Text'),
        'weight' => - 5
    );

    // Since we have only one bundle type, we'll just provide the extra_fields
    // for it here.
    $extra_fields ['cruise'] ['cruise_bundle'] ['form'] = $form_elements;
    $extra_fields ['cruise'] ['cruise_bundle'] ['display'] = $display_elements;
    return $extra_fields;
}

function cruise_save(&$cruise) {
    return entity_get_controller('cruise')->save($cruise);
}

function cruise_delete($id) {
    return entity_get_controller('cruise')->delete($id);
}

function cruise_list_view() {
    //satya
    unset($_SESSION['temp_id']);

    return drupal_render(drupal_get_form('cruise_list_form'));
    /*
      $output = '';
      $header = array (
      array (
      'data' => 'Id',
      'field' => 'id'
      ),
      array (
      'data' => 'Cruise Title',
      'field' => 'cruise_title'
      ),
      array (
      'data' => 'Cruise Type',
      'field' => 'cruise_type'
      ),
      array (
      'data' => 'Last Updated',
      'field' => 'created'
      ),
      array (
      'data' => 'Operations'
      ),
      array (
      'data' => 'Active',

      )
      );
      if (isset ( $_GET ['sort'] ) && isset ( $_GET ['order'] )) {
      if ($_GET ['sort'] == 'asc')
      $sort = 'ASC';
      else
      $sort = 'DESC';

      switch ($_GET ['order']) {
      case 'Id' :
      $order = 'id';
      break;
      case 'Cruise Title' :
      $order = 'cruise_title';
      break;
      case 'Cruise Type' :
      $order = 'cruise_type';
      break;
      case 'Last Updated' :
      $order = 'created';
      break;
      }
      } else {
      $sort = 'ASC';
      $order = 'id';
      }

      $query = db_select ( "cruise", "n" );
      $query->fields ( 'n', array (
      'id',
      'cruise_title',
      'cruise_type',
      'cruise_status',
      'created'
      ) );
      $query->orderBy ( $order, $sort );
      $query = $query->extend ( 'TableSort' )->extend ( 'PagerDefault' )->limit ( 5 );
      $result = $query->execute ()->fetchAll ();

      // var_dump($result[0]->cruise_title);
      // exit();

      global $base_url;
      $rows = array ();
      if (count ( $result ) > 0) {
      for($i = 0; $i < count ( $result ); $i ++) {
      $cruisetypeObject = cruisetypes_load ( $result [$i]->cruise_type );
      $cruisetype = $cruisetypeObject->name;
      $status=($result [$i]->cruise_status==1) ? "checked" : "unchecked";
      $rows [] = array (
      $result [$i]->id,
      $result [$i]->cruise_title,

      // $result [$i]->cruise_type,
      $cruisetype,
      date ( 'Y-m-d H:i a', $result [$i]->created ),
      '<a href="' . $base_url . '/cruise/' . $result [$i]->id . '/edit">edit  </a>
      <a href="' . $base_url . '/cruise/' . $result [$i]->id . '/delete">delete  </a>
      <a href="' . $base_url . '/scheduledevents/cruisetemplate/' . $result [$i]->id . '"> schedule</a>',
      '<input type="checkbox"'.$status.' disabled="disabled">',
      );
      }
      }

      $output .= '<div class="">';
      $output .= '<div class="">';

      $output .= '</div>';
      $output .= theme_table ( array (
      'header' => $header,
      'rows' => $rows,
      'attributes' => array (
      'class' => array (
      ''
      )
      ),
      'sticky' => true,
      'caption' => '',
      'colgroups' => array (),
      'empty' => t ( "No Records!" )
      ) ) . theme ( 'pager' );

      $output .= '</div>';

      return $output;
     */
}


/**
 * Getting the calendar tag information using templateid
 * (cruiseid)
 *
 *
 *
 */
function getCalendartag($templateid) {
    $tags = cruise_load($templateid);
    return $tags->calendar_tag;
}

function getSelectedids($templateid) {
    $ids = array();
    $selectedtickets = getselectedCruisetemplatetickets($templateid);
    foreach ($selectedtickets as $ticket) {
        $ids[] = $ticket->ticketid;
    }
    return $ids;
}

function getSelectedticketprice($templateid, $ticketid) {
    $selectedtickets = getselectedCruisetemplatetickets($templateid);
    foreach ($selectedtickets as $ticket) {
        if ($ticket->ticketid == $ticketid)
            return number_format($ticket->price, 2);
    }
}

function getSelectedticketWeight($templateid, $ticketid) {
    $selectedtickets = getselectedCruisetemplatetickets($templateid);
    foreach ($selectedtickets as $ticket) {
        if ($ticket->ticketid == $ticketid)
            return $ticket->weight;
    }
}

function getCruiseTicketByTemplateId($tid) {
    $result = '';
    $query = "SELECT ct.title,ct.id,ctt.price FROM cruisetickets ct LEFT JOIN cruise_template_tickets ctt ON ct.id = ctt.ticketid WHERE ctt.cruisetemplateid=" . $tid;
    $result = db_query($query);


    return $result->fetchAll();
}

function getCruiseTicketByWeight($tid) {
    $query = db_select('cruisetickets', '');
    $query->fields('cruisetickets', array('title', 'id'));
    $query->fields('cruise_template_tickets', array('price'));
    $query->innerJoin('cruise_template_tickets', '', 'cruisetickets.id = cruise_template_tickets.ticketid');
    $query->condition('cruise_template_tickets.cruisetemplateid', $tid, '=');
    $query->condition('cruise_template_tickets.activestatus', 1, '=');
    $query->orderBy('cruise_template_tickets.weight', 'ASC');
    $result = $query->execute()->fetchAll();

    return $result;
}

/**
 * 
 * 
 * Getting loading tickets by template
 */
function getCruiseTicketsbyTemplate($templateid) {
    $resultset = array();
    $query = db_select('cruise_template_tickets', 'ct');
    $query->join('cruisetickets', 'e', 'e.id = ct.ticketid');
    $query->fields('ct');
    $query->fields('e');
    $query->condition('ct.cruisetemplateid', $templateid, '=');
    $query->condition('ct.activestatus', 1, '=');
    $query->groupBy('e.id');
    $result = $query->execute();

    foreach ($result as $value) {
        $resultset[] = $value;
    }
    return $resultset;
}

/*
 * Getting the Cruise Ticketentrees by passing the Ticketid
 * Return Values
 */

function getCruiseTicketEntreesByTicketId($ticketid) {
    //SELECT cn.id,cn.title FROM cruiseentrees cn LEFT JOIN ticket_entrees te ON cn.id = te.entreeid WHERE te.ticketid=1;
    $finalresult = '';

    if ($ticketid != '') {
        $query = "SELECT cn.id,cn.title,te.ticketid FROM cruiseentrees cn LEFT JOIN ticket_entrees te ON cn.id = te.entreeid WHERE te.ticketid=" . $ticketid;

        $result = db_query($query);
        $finalresult = $result->fetchAll();
    }
    //$query="SELECT cn.id,cn.title,te.ticketid FROM cruiseentrees cn LEFT JOIN ticket_entrees te ON cn.id = te.entreeid WHERE te.ticketid=".$ticketid;
    return $finalresult;
}

/**
 * 
 * Cruise assignement form using theme table implementation
 * 
 * 
 */
//Example function that gets user info from database
function cruise_fee_assignement_form($form, &$form_state, $cruise) {

// 	var_dump($cruise);
    //getting the list of assined cruise template fees

    $cruisefeelistview = array();
    $query = db_select("cruise_template_fees", "ctf");
    // Adding fields
    $query->fields('ctf');
    $query->condition('template_id', $cruise->id, '=');

    $assignedresult = $query->execute();

    $feeidislist = array();
    $rates = array();

    foreach ($assignedresult as $assingedfee) {
// 		var_dump($assingedfee);
        $feeidislist[] = $assingedfee->feeid;
        $rates[$assingedfee->feeid] = $assingedfee->extrarate;
    }

// 	var_dump($feedislist);
// 	var_dump($rates);
    //end of assigned cruise templatedis



    $cruisefeelistview = array();
    $query = db_select("cruisefee", "cf");
    // Adding fields
    $query->fields('cf');


    $result = $query->execute();


    foreach ($result as $fee) {
        $cruisefeelistview[$fee->id] = array(
            'title' => $fee->title,
            'rate' => $fee->rate,
        );
    }

// 	var_dump($cruisefeelistview);



    $form['cruisefee'] = array(
        '#tree' => TRUE,
        '#theme' => 'cruise_fee_assignement_table'
    );

    $totalrows = 0;
    $recordcount = 1;
    foreach ($cruisefeelistview as $key => $record) {
// 		var_dump($record);
        $form['cruisefee'][$recordcount] = array(
            '#tree' => TRUE,
            '#theme' => 'cruise_fee_assignement_table'
        );


        //checking for attributte

        if (in_array($key, $feeidislist)) {
            $checked = array('checked' => 'checked');
            $extrarate = number_format($rates[$key], 2);
        } else {
            $checked = array();
            $extrarate = '';
        }

        $form['cruisefee'][$recordcount]['assigncheckbox' . '-' . $key] = array(
            '#type' => 'checkbox',
            '#return_value' => $key,
//   		'#title' => t('Send me a copy.'),
            '#attributes' => $checked
        );


        $form['cruisefee'][$recordcount]['fee' . '-' . $key] = array(
            '#type' => 'item',
            '#markup' => '<span>' . $record['title'] . '</span>'
        );






        $form['cruisefee'][$recordcount]['defaultrate' . '-' . $key] = array(
            '#type' => 'item',
            '#markup' => '<span>' . number_format($record['rate'], 2) . '</span>'
        );



        $form['cruisefee'][$recordcount]['appliedrate' . '-' . $key] = array(
            '#type' => 'textfield',
            '#default_value' => $extrarate, //
            '#size' => 60,
            '#maxlength' => 128,
        );



        $totalrows++;
        $recordcount++;
    }

    $form['cruisefee']['templateid'] = array(
        '#type' => 'hidden',
        '#value' => $cruise->id, //
    );
    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'foo/bar'),
    );
    return $form;
}

/**
 * Cruise assignement form submit values
 * 
 * 
 * 
 */
function cruise_fee_assignement_form_submit($form, &$form_state) {


    $cruise_templateid = $form_state['values']['cruisefee']['templateid'];

    foreach ($form_state['values']['cruisefee'] as $fieldvalue) {
        if (is_array($fieldvalue)) {
            foreach ($fieldvalue as $assignekey => $cruisefeefield) {
// 				var_dump($cruisefeefield);
// 				var_dump($assignekey);
// 				exit();
                $comparekey = explode('-', $assignekey);
// 				var_dump($comparekey[0]);//key value

                if ($comparekey[0] == 'assigncheckbox' && (int) $cruisefeefield > 0) {

                    //Cruise Template Fee Assignement
                    //creating the cruise Fee template assignement Object
                    $cruisetemplateObj = new stdClass();
                    $cruisetemplateObj->feeid = $cruisefeefield;
                    $cruisetemplateObj->template_id = $cruise_templateid;
                    $cruisetemplateObj->extrarate = $fieldvalue['appliedrate-' . $cruisefeefield];





                    //checking for the excistence record

                    $query = db_select('cruise_template_fees', 'cf');
                    $query->fields('cf');
                    $query->condition('feeid', $cruisefeefield, '=');
                    $query->condition('template_id', $cruise_templateid, '=');

                    $resultset = $query->execute();
                    $recordcount = $resultset->rowCount();
                    var_dump($recordcount);

                    if ($recordcount == 1) {
                        //update record

                        $num_updated = db_update('cruise_template_fees') // Table name no longer needs {}
                                ->fields(array(
                                    'extrarate' => $fieldvalue['appliedrate-' . $cruisefeefield],
                                ))
                                ->condition('feeid', $cruisefeefield, '=')
                                ->condition('template_id', $cruise_templateid, '=')
                                ->execute();
                        drupal_set_message('Record updated sucessfully');
                    } else {
                        $bbolinsert = drupal_write_record('cruise_template_fees', $cruisetemplateObj);
                        if ($bbolinsert) {
                            drupal_set_message('Record assigned sucessfully');
                        } else {
                            drupal_set_message('Record assigned failed');
                        }
                    }




                    //checking for the excistence record
                    //End of Cruise Template Fee Assignement
                } else {


                    if ($comparekey[0] == 'assigncheckbox' && (int) $cruisefeefield == 0) {



                        $feeunassigned_deleted = db_delete('cruise_template_fees')
                                ->condition('feeid', $comparekey[1], '=')
                                ->condition('template_id', $cruise_templateid, '=')
                                ->execute();
                    }
                }
            }
        }
    }
}

//laxmi::Cruise Fee Assginement theme table
function theme_cruise_fee_assignement_table($vars) {
    $element = $vars['element'];

    $filterarraylist = array(
        '#parents',
        '#array_parents',
        '#attributes',
        '#process'
    );


    $rows = array();
    foreach (element_children($element) as $key => $keyval) {

        foreach ($element[$keyval] as $tkey => $value) {
            if (is_array($value)) {
                if (!in_array($tkey, $filterarraylist)) {

                    $fieldsarray[] = array('data' => render($value));
                }
            }
        }

// var_dump($fieldsarray);

        if (isset($fieldsarray) && $fieldsarray != null)
            $rows[] = $fieldsarray;
        unset($fieldsarray);
    }


    $header = array(t('Assign'), t('Fee'), t('Default Rate'), t('Applied Rate'));
    return theme('table', array('header' => $header, 'rows' => $rows));
}
