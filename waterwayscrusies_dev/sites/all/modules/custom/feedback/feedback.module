<?php

/**
 * Implements hook_menu().
 */
function feedback_menu() {
    //Admin Management for FeedBack

    $items['feedback'] = array(
        'title' => 'Feedbacks',
        'page callback' => 'feedback_list_form',
        'access arguments' => array('view feedback entity'),
    );

    $items['admin/structure/feedback/manage'] = array(
        'title' => 'FeedBack Admin',
        'description' => 'Manage FeedBack Structure',
        'page callback' => 'feedback_admin_page',
        'access arguments' => array('Administer feedback entities'),
    );

    //Detailed View for FeedBack
    $items['feedback/%feedback'] = array(
        'title callback' => 'feedback_page_title',
        'title arguments' => array(1),
        'page callback' => 'feedback_page_view',
        'page arguments' => array(1),
        'access arguments' => array('view feedback entities'),
        'type' => MENU_CALLBACK,
    );


    //FeedBack View
    $items['feedback/%feedback/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
    );


    //FeedBack Edit
    $items['feedback/%feedback/edit'] = array(
        'title' => 'Edit',
        'load arguments' => array('feedback'),
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'feedback_item_edit',
        'access arguments' => array('edit feedback entities'),
        'page arguments' => array(1),
    );

    //FeedBack Add
    $items['feedback/add'] = array(
        'title' => 'Add feedback',
        'page callback' => 'feedback_add',
        'access arguments' => array('create feedback entities'),
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function feedback_permission() {
    return array(
        'administer feedback entities' => array(
            'title' => t('Administer feedback entities'),
            'restrict access' => TRUE,
        ),
        'view feedback entities' => array(
            'title' => t('View feedback Entities'),
        ),
        'create feedback entities' => array(
            'title' => t('Create feedback Entities'),
        ),
        'view feedback entity' => array(
            'title' => t('view feedback entity'),
        ),
    );
}

/**
 * Implements hook_entity_info().
 */
function feedback_entity_info() {
    $feedback_info['feedback'] = array(
        'label' => t('feedback Entity'),
        'controller class' => 'feedbackController',
        'base table' => 'feedback',
        'uri callback' => 'feedback_uri',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
        ),
        'static cache' => TRUE,
        'bundles' => array(
            'feedback_bundle' => array(
                'label' => 'feedback',
                'admin' => array(
                    'path' => 'admin/structure/feedback/manage',
                    'access arguments' => array('administer feedback entities'),
                ),
            ),
        ),
        'view modes' => array(
            'full' => array(
                'label' => t('Full'),
                'custom settings' => FALSE,
            ),
        )
    );
    return $feedback_info;
}

function feedback_page_title($feedback) {
    return 'Feedback';
}

function feedback_load($id = NULL, $reset = FALSE) {
    $ids = (isset($id) ? array($id) : array());
    $feedback = feedback_load_multiple($ids, array(), $reset);
    return $feedback ? reset($feedback) : FALSE;
}

function feedback_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('feedback', $ids, $conditions, $reset);
}

function feedback_uri($basic) {
    return array(
        'path' => 'feedback/' . $feedback->id,
    );
}

function feedback_admin_page() {
    $output = 'Admin page for feedback entities.<br/>';
    $output .= '<a href="/community/add">Add feedback entity</a>';

    return $output;
}

//List View

/**
 * Returns a render array with all userdocuments entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function feedback_list_form() {
    return drupal_render(drupal_get_form('feedback_list_view'));
}

function feedback_list_view($form, &$form_state) {
    global $user;
    global $base_url;
    drupal_add_css(drupal_get_path('module', 'feedback') . '/feedback.css');
    $viewhtml = '';
    if (isset($_GET['feedback_startdate']['date'])) {
        $feedback_startdate = '';
        $feedback_starttime = '';
        if ($_GET['feedback_startdate']['date'] != '') {
            $feedback_startdate = $_GET['feedback_startdate']['date'];
            $feedback_starttime = strtotime($feedback_startdate . " 00:00:00");
            $viewhtml.='feedback_startdate[date]=' . $feedback_startdate;
        }
    }
    if (isset($_GET['feedback_enddate']['date'])) {
        $feedback_enddate = '';
        $feedback_endtime = '';
        if ($_GET['feedback_enddate']['date'] != '') {
            $feedback_enddate = $_GET['feedback_enddate']['date'];
            $feedback_endtime = strtotime($feedback_enddate . " 23:59:59");
            if ($viewhtml != '') {
                $viewhtml.='&feedback_enddate[date]=' . $feedback_enddate;
            } else {
                $viewhtml.='feedback_enddate[date]=' . $feedback_enddate;
            }
        }
    }




    $form['#method'] = 'get';

    $form['feedback_startdate'] = array(
        '#id' => 'feedbackstart_date',
        '#type' => 'date_popup',
        '#date_format' => 'Y-m-d',
        '#title' => t(''),
        '#title_display' => 'invisible',
        '#default_value' => isset($feedback_startdate) ? $feedback_startdate : '',
        '#description' => '',
        '#attributes' => array('class' => array('dateFieldStyle dateFieldMedium'), 'placeholder' => array('Start Date')),
        '#prefix' => '<div class="row-fluid"><div class="span12"><div class="pull-left">',
        '#suffix' => '</div>',
    );

    $form['feedback_enddate'] = array(
        '#id' => 'feedbackend_date',
        '#type' => 'date_popup',
        '#date_format' => 'Y-m-d',
        '#title' => t(''),
        '#title_display' => 'invisible',
        '#default_value' => isset($feedback_enddate) ? $feedback_enddate : '',
        '#description' => '',
        '#attributes' => array('class' => array('dateFieldStyle dateFieldMedium'), 'placeholder' => array('End Date')),
        '#prefix' => '<div class="pull-left">',
        '#suffix' => '</div>',
    );

    $form['results_feedback'] = array(
        '#type' => 'submit',
        '#name' => 'search_btn_feedback',
        '#value' => 'Search',
        '#prefix' => '<div class="pull-left" style="padding:13px;">',
        '#suffix' => '</div>',
    );

    $form['export_feedback'] = array(
        '#name' => 'export_btn_feedback',
        '#type' => 'submit',
        '#value' => t('Export'),
        '#submit' => array('feedback_export'),
        '#prefix' => '<div class="pull-left" style="padding:13px;">',
        '#suffix' => '</div>',
    );


    if (isset($_GET['feedback_startdate']) || isset($_GET['feedback_enddate'])) {
        $form['clear_export_list_feedback'] = array(
            '#name' => 'clear_btn_feedback',
            '#type' => 'submit',
            '#value' => t('Clear'),
            '#submit' => array('clear_export_feedback'),
            '#prefix' => '<div class="pull-left" style="padding:13px;">',
            '#suffix' => '</div></div></div>',
        );
    }



    if (isset($_GET['export_btn_feedback'])) {

        feedback_export($_GET);
    }


    if (isset($_GET['clear_btn_feedback'])) {
        clear_export_feedback($_GET);
    }


//   
//    drupal_add_js(drupal_get_path('module', 'userdocuments') . '/js/userdocuments.js');
    // Initialising output
    $output = '';
    // Table header
    $header = array(
        array('data' => 'Id', 'field' => 'id'),
        array('data' => 'First Name', 'field' => 'firstName'),
        array('data' => 'Last Name', 'field' => 'lastName'),
        array('data' => 'Created Date', 'field' => 'created'),
        array('data' => 'Actions'),
    );
    // Setting the sort conditions


    if (isset($_GET ['sort']) && isset($_GET ['order'])) {
        if ($_GET ['sort'] == 'asc')
            $sort = 'ASC';
        else
            $sort = 'DESC';

        switch ($_GET ['order']) {
            case 'Id' :
                $order = 'id';
                break;
        }
    } else {
        $sort = 'DESC';
        $order = 'created';
    }
//    drupal_add_css(drupal_get_path('module', 'feedback') . '/userdocuments.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
//    drupal_add_js(drupal_get_path('module', 'userdocuments') . '/js/userdocuments.js');
    // Initialising output
    $output = '';
    // Table header
    $header = array(
        array('data' => 'Id', 'field' => 'id'),
        array('data' => 'First Name', 'field' => 'firstName'),
        array('data' => 'Last Name', 'field' => 'lastName'),
        array('data' => 'Created Date', 'field' => 'created'),
        array('data' => 'Actions'),
    );
    if (isset($_GET['sort']) && isset($_GET['order'])) {
        // Sort it Ascending or Descending?
        if ($_GET['sort'] == 'asc')
            $sort = 'ASC';
        else
            $sort = 'DESC';
        // Which column will be sorted
        switch ($_GET['order']) {
            case 'Id':
        $order = 'id';
                break;
            case 'Created':
                $order = 'created';
                break;


            default:
                $order = 'created';
    }
    } else {
        // Default sort
        $sort = 'DESC';
        $order = ' created';
    }



    $query = db_select("feedback", "f");

    // Adding fields
    $query->fields('f', array('id', 'firstName', 'lastName', 'created'));

    /* Filteration of Records between certain Date Range */
    if ($feedback_starttime != '' && $feedback_endtime != '') {
        if ($feedback_starttime < $feedback_endtime != '') {
            $feedback_enddate = $feedback_enddate . " 23:59:59";
            $feedback_startdate = $feedback_startdate . " 00:00:00";
            $query->where("f.created >= UNIX_TIMESTAMP('$feedback_startdate ') and f.created <= UNIX_TIMESTAMP('$feedback_enddate ')");
        } else {
            drupal_set_message("End date must be Greater than start date");
        }
    }
    // Set order by
    $query->orderBy($order, $sort);
    // Pagination
    $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);
    // Executing query
    $result = $query->execute();
//    $pageurl = drupal_get_destination();
    // Looping for filling the table rows

    while ($data = $result->fetchObject()) {
        $viewbtn = '';
        if ($viewhtml != '') {
            $viewbtn = '<a href="' . $base_url . '/feedback/' . $data->id . '?' . $viewhtml . '">view </a>';
        } else {
            $viewbtn = '<a href="' . $base_url . '/feedback/' . $data->id . '">view </a>';
        }
        // Adding the rows
        $rows[] = array(
            $data->id,
            $data->firstName,
            $data->lastName,
            date('m-d-Y', $data->created),
            $viewbtn,
        );
    }
    //Setting the output of the field
    $output .= theme_table(
                    array(
                        'header' => $header,
                        'rows' => $rows,
                        'attributes' => array('class' => array('table table-striped table-bordered')),
                        'sticky' => true,
                        'caption' => '',
                        'colgroups' => array(),
                        'empty' => t("No Records!") //The message to be displayed if table is empty
                    )
            ) . theme('pager');



    $form['outputmarkup'] = array(
        '#type' => 'markup',
        '#markup' => $output
    );
    return $form;
}

//end of List_view
//Entity page view

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function feedback_page_view($entity, $view_mode = 'tweaky') {
    drupal_add_css(drupal_get_path('module', 'feedback') . '/feedback.css');
    global $base_url;
    // Our entity type, for convenience.
    $entity_type = 'feedback';
    // Start setting up the content.
    $entity->content = array(
        '#view_mode' => $view_mode,
    );

    // Build fields content - this is where the Field API really comes in to play.
    // The task has very little code here because it all gets taken care of by
    // field module.
    // field_attach_prepare_view() lets the fields load any data they need
    // before viewing.
    field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);
    // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
    // for us.
    entity_prepare_view($entity_type, array($entity->id => $entity));
    // Now field_attach_view() generates the content for the fields.
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);

    // OK, Field API done, now we can set up some of our own data.
    //RequestQuote Id
//  $entity->content['id'] = array(
//      '#type' => 'item',
//      '#title' => t('id'),
//      '#markup' => $entity->id,
//  );
//  
//  




    $paramshtml = '';
    if (isset($_GET['feedback_startdate']['date']) && $_GET['feedback_startdate']['date'] != '') {
        $paramshtml.='?feedback_startdate[date]=' . $_GET['feedback_startdate']['date'];
    }
    if (isset($_GET['feedback_enddate']['date']) && $_GET['feedback_enddate']['date'] != '') {
        if ($paramshtml != '') {
            $paramshtml.='&feedback_enddate[date]=' . $_GET['feedback_enddate']['date'];
        } else {
            $paramshtml.='?feedback_enddate[date]=' . $_GET['feedback_enddate']['date'];
        }
    }

    $html = '<div class="row-fluid"><div class="span12">'
            . '<a class="backlinkclass" style="color:#0088CC;text-decoration:none; font-size:15px;" href="' . $base_url . '/feedback' . $paramshtml . '">Back</a>'
            .
            '</div></div>';


    $htmlcontent = array(
        '#type' => 'item',
        '#markup' => $html,
    );
    $entity->content['commentstype'] = array(
        '#type' => 'item',
        '#title' => t('Feedback Type:'),
        '#markup' => $entity->commentstype,
    );

    $entity->content['firstName'] = array(
        '#type' => 'item',
        '#title' => t('First Name:'),
        '#markup' => $entity->firstName,
    );

    $entity->content['lastName'] = array(
        '#type' => 'item',
        '#title' => t('Last Name:'),
        '#markup' => $entity->lastName,
    );
    $entity->content['email'] = array(
        '#type' => 'item',
        '#title' => t('Email:'),
        '#markup' => $entity->email,
    );
    $entity->content['feedbackdescription'] = array(
        '#type' => 'item',
        '#title' => t('Feedback Description:'),
        '#markup' => $entity->feedbackdescription,
    );

    //EventType Values 
    // Now to invoke some hooks. We need the language code for
    // hook_entity_view(), so let's get that.
    global $language;
    $langcode = $language->language;
    // And now invoke hook_entity_view().
    module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
    // Now invoke hook_entity_view_alter().
    drupal_alter(array('userdocuments_view', 'entity_view'), $entity->content, $entity_type);

    // And finally return the content.
    return array($htmlcontent, $entity->content);
}

function feedback_export($params) {


    if (isset($params['feedback_startdate']['date'])) {
        $feedback_startdate = '';
        $feedback_starttime = '';
        if ($params['feedback_startdate']['date'] != '') {
            $feedback_startdate = $params['feedback_startdate']['date'];
            $feedback_starttime = strtotime($feedback_startdate . " 00:00:00");
        }
    }
    if (isset($params['feedback_enddate']['date'])) {
        $feedback_enddate = '';
        $feedback_endtime = '';
        if ($params['feedback_enddate']['date'] != '') {
            $feedback_enddate = $params['feedback_enddate']['date'];
            $feedback_endtime = strtotime($feedback_enddate . " 23:59:59");
        }
    }

    $header = array(
        0 => 'Id',
        1 => 'Feedback Type',
        2 => 'First Name',
        3 => 'Last Name',
        4 => 'Email',
        5 => 'Feedback Description',
        6 => 'Created'
    );
    $query = db_select("feedback", "f");
    $query->fields('f', array('id',
        'firstName',
        'lastName',
        'email',
        'commentstype',
        'feedbackdescription',
        'created',
            )
    );


    if ($feedback_starttime != '' && $feedback_endtime != '') {
        if ($feedback_starttime < $feedback_endtime != '') {
            $feedback_enddate = $feedback_enddate . " 23:59:59";
            $feedback_startdate = $feedback_startdate . " 00:00:00";
            $query->where("f.created >= UNIX_TIMESTAMP('$feedback_startdate') and f.created <= UNIX_TIMESTAMP('$feedback_enddate')");
        } else {
            drupal_set_message("End date must be Greater than start date");
        }
    }
    $result = $query->execute()->fetchAll();


    global $base_url;
    $rows = array();
//     $rows[] = array(t('#Id'), t('Name'), t('Email'), t('Phone'), t('Orders'), t('Products'), t('Total Amount'));
    if (count($result) > 0) {
        for ($i = 0; $i < count($result); $i ++) {

            $rows [] = array(
                $result [$i]->id,
                $result [$i]->commentstype,
                $result [$i]->firstName,
                $result [$i]->lastName,
                $result [$i]->email,
                $result [$i]->feedbackdescription,
                date('m-d-Y', $result [$i]->created),
            );
        }
    }

    excel_export_data('Feedback', $header, $rows);
}

function clear_export_feedback($params) {

    $path = 'feedback';
    drupal_goto($path);
}

//Entity Page view gets 

function feedback_item_edit($feedback) {

    drupal_set_title(t('<em>Edit feedback entity</em> @title', array('@title' =>
        'RequestQuote')), PASS_THROUGH);
    return drupal_get_form('feedback_add_form', $feedback);
}

function feedback_add() {
    $feedback = (object) array(
                'commentstype' => '', //Values which are in saparated by comma.
                'feedbackdescription' => '',
                'firstName' => '',
                'lastName' => '',
                'email' => '',
                'created' => REQUEST_TIME
    );

    return drupal_get_form('feedback_add_form', $feedback);
}

function feedback_add_form($form, &$form_state, $feedback) {

    if (isset($feedback->id) && ($feedback->id != null)) {
        $form['id'] = array(
            '#type' => 'hidden',
            '#title' => t('id'),
            '#default_value' => $feedback->id,
            '#required' => TRUE,
        );
    } else {
        $form['created'] = array(
            '#type' => 'hidden',
            '#title' => t('created'),
            '#default_value' => $feedback->created,
        );
    }

    $form['commentstype'] = array(
        '#type' => 'textfield',
        '#title' => t('Comments'),
        '#default_value' => $feedback->comments,
        '#required' => TRUE,
    );

    $form['feedbackdescription'] = array(
        '#type' => 'textfield',
        '#title' => t('feedbackdescription'),
        '#default_value' => $feedback->feedbackdescription,
        '#required' => TRUE,
    );

    $form['firstName'] = array(
        '#type' => 'textfield',
        '#title' => t('firstName'),
        '#default_value' => $feedback->firstName,
        '#required' => TRUE,
    );

    $form['lastName'] = array(
        '#type' => 'textfield',
        '#title' => t('lastName'),
        '#default_value' => $feedback->lastName,
        '#required' => TRUE,
    );

    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('email'),
        '#default_value' => $feedback->email,
        '#required' => TRUE,
    );

    field_attach_form('feedback', $feedback, $form, $form_state);
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#weight' => 100,
    );
    return $form;
}

function feedback_field_extra_fields() {
    $form_elements['id'] = array(
        'label' => t('id'),
        'description' => t('id (an extra form field)'),
        'weight' => -5,
    );
    //Event Type
    $form_elements['commentstype'] = array(
        'label' => t('commentstype'),
        'description' => t('comments (an extra form field)'),
        'weight' => -5,
    );
    $form_elements['feedbackdescription'] = array(
        'label' => t('feedbackdescription'),
        'description' => t('feedbackdescription (an extra form field)'),
        'weight' => -5,
    );
    //
//   
    $form_elements['firstName'] = array(
        'label' => t('firstName'),
        'description' => t('firstName (an extra form field)'),
        'weight' => -5,
    );
//   
    $form_elements['lastName'] = array(
        'label' => t('lastName'),
        'description' => t('lastName (an extra form field)'),
        'weight' => -5,
    );

//    
    $form_elements['email'] = array(
        'label' => t('email'),
        'description' => t('email (an extra form field)'),
        'weight' => -5,
    );

    $display_elements['id'] = array(
        'label' => t('id'),
        'description' => t('id (an extra form field)'),
        'weight' => -5,
    );
    //Event Type
    $display_elements['commentstype'] = array(
        'label' => t('commentstype'),
        'description' => t('comments (an extra form field)'),
        'weight' => -5,
    );
    $display_elements['feedbackdescription'] = array(
        'label' => t('feedbackdescription'),
        'description' => t('feedbackdescription (an extra form field)'),
        'weight' => -5,
    );


    $display_elements['firstName'] = array(
        'label' => t('firstName'),
        'description' => t('firstName (an extra form field)'),
        'weight' => -5,
    );
//   
    $display_elements['lastName'] = array(
        'label' => t('lastName'),
        'description' => t('lastName (an extra form field)'),
        'weight' => -5,
    );


    // Since we have only one bundle type, we'll just provide the extra_fields
    // for it here.
    $extra_fields['feedback']['feedback_bundle']['form'] = $form_elements;
    $extra_fields['feedback']['feedback_bundle']['display'] = $display_elements;

    return $extra_fields;
}

function feedback_add_form_validate($form, &$form_state) {
    $feedback_submission = (object) $form_state['values'];
    field_attach_form_validate('feedback', $feedback_submission, $form, $form_state);
}

function feedback_add_form_submit($form, &$form_state) {
    $feedback_submission = (object) $form_state['values'];
    field_attach_submit('feedback', $feedback_submission, $form, $form_state);
    $feedback = feedback_save($feedback_submission);
    $form_state['redirect'] = 'feedback/' . $feedback->id;
}

function feedback_save(&$feedback) {

    return entity_get_controller('feedback')->save($feedback);
}

class feedbackController extends DrupalDefaultEntityController {

    public function save($feedback) {
        if (isset($feedback->id) && ($feedback->id != null)) {
            drupal_write_record('feedback', $feedback, array('id'));
            field_attach_update('feedback', $feedback);
        } else {
            drupal_write_record('feedback', $feedback);
            field_attach_insert('feedback', $feedback);
        }
        module_invoke_all('entity_insert', $feedback, 'feedback');

        //Sending Email the RequestQuote Details
        $to = SiteConfiguration::getFeedback();
        $params = array(
            'subject' => t('WWC Feedback'),
            'body' => t("Data"),
            'formdata' => $feedback,
        );
        drupal_mail("email_system", "wwc_feedback", $to, language_default(), $params, $to);
//    drupal_json_output('success');
        //End of Send Email The RequestQuote Details
        return $feedback;
    }

}
