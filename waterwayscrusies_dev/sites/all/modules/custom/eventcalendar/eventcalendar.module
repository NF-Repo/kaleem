<?php

/**
 * Implements hook_menu().
 */

function eventcalendar_menu() {
    $items = array();
    $items['eventcalendar'] = array(
        'title' => 'Event Calendar',
        'page callback' => 'wwc_calendar',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
    );
$items['ctoolpopups/%ctools_js/rid/%/bookingdate/%/currentbookingdate/%'] = array(
        'page callback' => 'bctoolpopup_callback',
        'page arguments' => array(1,3,5,7),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );





    return $items;

}
function eventcalendar_theme() {
  return array(
    'calendar_add_form' => array(
      'file' => 'calendar.theme.inc',
      'render element' => 'form',
    ),
   
  );
}






/**
 * Helper function to make a link.
 */
function _bctoolpopup_make_link($link_text = '') {
    // Set a default value if no text in supplied.
    if (empty($link_text)) {
        $link_text = 'Magical Modal';
    }

    return '<div id="magical-modal-link" style="margin-top:250px;">' . l($link_text, 'ctoolpopups/nojs', array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';
}

/**
 * An example page.
 */
function bctoolpopup_page() {
    // Load the modal library and add the modal javascript.
    ctools_include('modal');
    ctools_modal_add_js();
    return _ctoolpopup_make_link('Magical modal');
}

/**
 * Ajax menu callback.
 */
function bctoolpopup_callback($js = NULL) {
  $arraytest=array();

$orderid=  arg(3);//nid
$bookingdate=  arg(5);//bookingdatea
$reservationdata=arg(7);

    if ($js) {
     
        ctools_include('ajax');
        ctools_include('modal');

        $form_state = array(
            'ajax' => TRUE,
            'title' => t('Event Dates'),
            'orderid'=>$orderid,
            'bookeddate'=>$reservationdata,
            'reservationdate'=>$bookingdate
        );

        
        
        
        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        
        $output = ctools_modal_form_wrapper('bctoolpopup_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['ajax_commands'])) {
            $output = $form_state['ajax_commands'];
        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    } else {
        return drupal_get_form('bctoolpopup_form');
    }
}

/**
 * Drupal form to be put in a modal.
 */
function bctoolpopup_form($form, $form_state) {
    $form = array();

   
//    $form_state = array(
//            'ajax' => TRUE,
//            'title' => t('Event Dates'),
//            'cruiseid'=>$cruiseid,
//            'bookeddate'=>$bookingdate,
//            'reservationdate'=>$reservationdata
//        );
    $currentbookingdate=$form_state['reservationdate'];
    $previousbokkingdate=$form_state['bookeddate'];
    
//    $currentbookingdate=date('Y-m-d',$currentbookingdate);
//    $previousbokkingdate=date('Y-m-d',$previousbokkingdate);
    $orderid=$form_state['orderid'];
    $form['eventtitle'] = array(
  '#type' => 'item',
//  '#title' => t('Event Date'),
  '#markup' =>'<h1>Event dates</h1>',

);
    
 $form['eventdate'] = array(
  '#type' => 'item',
//  '#title' => t('Event Date'),
  '#markup' =>'<p>Are you sure you want to change the bookng date form '.date('Y-m-d',$previousbokkingdate).' to '.date('Y-m-d',$currentbookingdate).'</p>',

);
 
  $form['oldbookingdate'] = array(
  '#type' => 'hidden',
//  '#title' => t('Event Date'),
  '#value' =>$previousbokkingdate,

);
   $form['newbookingdate'] = array(
  '#type' => 'hidden',
//  '#title' => t('Event Date'),
  '#value' =>$currentbookingdate,

);
   
   $form['orderid'] = array(
  '#type' => 'hidden',
//  '#title' => t('Event Date'),
  '#value' =>$orderid,

);

   
  
//  $form['currentstock'] = array(
//  '#type' => 'item',
//  '#title' => t('Event Date'),
//  '#markup' =>'<p>Stock available</p>',
//
//);
     
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );
    
    

    return $form;
}




/**
 * Drupal form submit handler.
 */
function bctoolpopup_form_submit(&$form, &$form_state) {
  
//  drupal_json_output($form_state['values']);exit();
  $current_orderid=$form_state['values']['orderid'];
  $bookindate=($form_state['values']['newbookingdate']);
  
  //loading the reservation dates based on booked date and order id
  //assuming the stock is prechecked in the calendar dates showing itself
  
  $booking_updated = db_update('reservation') // Table name no longer needs {}
  ->fields(array(
    'bookingdate' =>$bookindate,
    
  ))
 ->condition('orderid',$current_orderid, '=')
  ->execute();
  
  
//date upated and get reload the order edit page
//    http://localhost/works/book/latest/web/web/admin/store/orders/125/edit
    $pathurl= 'admin/store/orders/'.$current_orderid.'/edit';
   
  
  
  
  
  //reservation changes
  
  
  // Generate the new link using the submitted text value.
//  $link = _ctoolpopup_make_link($form_state['values']['new_link_text']);
 
  // Tell the browser to close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  $form_state['ajax_commands'][] = ctools_ajax_command_redirect($pathurl);
 
  // Tell the browser to replace the old link with the new one.
//  $form_state['ajax_commands'][] = ajax_command_replace('#magical-modal-link', '');
  //To do refresh the pane
}







function getCalendarform($reservationdate,$cruiseid)
{
  

  return drupal_get_form('calendar_add_form', $reservationdate,$cruiseid);
}


function wwc_calendar() {


  return drupal_get_form('calendar_add_form', $reservation,$cruiseid);
}
function calendars_day_fields($month, $year,$reservationdate,$cruiseeventid,$orderid)
{
//  var_dump($reservationdate);
//   var_dump($cruiseeventid);
//   var_dump($month);
//   var_dump($year);
  $first_day = mktime(0, 0, 0, $month, 1, $year);
  $break = mktime(0, 0, 0, $month + 1, 1, $year);//break the month for end day
 
  $reservationday=date('d',$reservationdate);
  
  
  // Find out what day of the week the first day of the month falls on
  $day_of_week = date('D', $first_day);
  $blank = date('w', $first_day);

  $end_day = mktime(0, 0, 0, $month + 1, 0, $year); //last day of previous month
  $days_in_month = date('j', $end_day);
  
  //store these for the theme function
  $form = array(
    '#first_day' => $first_day,
    '#day_of_week' => $day_of_week,
    '#blank' => $blank,
    '#end_day' => $end_day,
    '#tree' => TRUE,
    '#days_in_month' => $days_in_month,
    '#reservationdate'=>$reservationdate,
      '#currentmonth'=>$month,
      '#currentyear'=>$year,
      '#cruiseid'=>$cruiseeventid,
      '#orderid'=>$orderid
  );

//  var_dump($form);
  //make assoc array of data existing availability
  $assoc = array();
  foreach ($days as $day) {
       $day = (array)$day;
       $dateTime = new DateTime($day['calendar_dt']); 
$ref_day=$dateTime->format('j'); 
$assoc[$ref_day] = $day;
    
  }
  
  $rows = $row = array();
  $counter = new DateObject(date(DATE_FORMAT_ISO, $first_day), date_default_timezone(), DATE_FORMAT_ISO);
  while ((int)$counter->format('U') < $break) {
    $ref_day = $counter->format('j');
    $existing = (isset($assoc[$ref_day]) ? $assoc[$ref_day] : FALSE);
    $form[$ref_day] = array();
     

    //loop to next day
    $counter->modify('+ 1 day');
  }

  return $form;
}















function calendar_add_form($form, &$form_state, $reservationdate,$cruiseeventid) {
 // Generate the first day of the month
// var_dump($reservationdate);
$year=date('Y',$reservationdate);
 $month=date('m',$reservationdate);

 


  $form['calendar'] = calendars_day_fields($month, $year,$reservationdate,$cruiseeventid);
  
  return $form;
}
