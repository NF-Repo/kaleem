<?php

/**
 * Implements hook_menu().
 */
function cruisesettings_menu() {
  //Admin Management for Request Quote

  $items['cruisesettings'] = array(
      'title' => 'Entity cruisesettings Application form',
      'page callback' => 'cruisesettings_list_view',
      'access arguments' => array('view cruisesettings entity'),
  );

  $items['admin/structure/cruisesettings/manage'] = array(
      'title' => 'Cruise Settings Admin',
      'description' => 'Manage Settings Structure',
      'page callback' => 'cruisesettings_admin_page',
      'access arguments' => array('manage cruise settings'),
  );

  //Detailed View for Request Quote
  $items['cruisesettings/%cruisesettings'] = array(
      'title callback' => 'cruisesettings_page_title',
      'title arguments' => array(1),
      'page callback' => 'cruisesettings_page_view',
      'page arguments' => array(1),
      'access arguments' => array('view cruisesettings entities'),
      'type' => MENU_CALLBACK,
  );


  //Request Quote View
  $items['cruisesettings/%cruisesettings/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );


  //Request Quote Edit
  $items['cruisesettings/%cruisesettings/edit'] = array(
      'title' => 'Edit',
      'load arguments' => array('cruisesettings'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'cruisesettings_item_edit',
      'access arguments' => array('edit cruisesettings entities'),
      'page arguments' => array(1),
  );

  //Request Quote Add
  $items['cruisesettings/add'] = array(
      'title' => 'Add cruisesettings',
      'page callback' => 'cruisesettings_add',
      'access arguments' => array('create cruisesettings entities'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function cruisesettings_permission() {
  return array(
      'administer cruisesettings entities' => array(
          'title' => t('Administer cruisesettings entities'),
          'restrict access' => TRUE,
      ),
      'view cruisesettings entities' => array(
          'title' => t('View cruisesettings Entities'),
      ),
      'create cruisesettings entities' => array(
          'title' => t('Create cruisesettings Entities'),
      ),
      'manage cruise settings' => array(
          'title' => t('Manage Cruise Settings'),
      ),
  );
}

/**
 * Implements hook_entity_info().
 */
function cruisesettings_entity_info() {
  $cruisesettings_info['cruisesettings'] = array(
      'label' => t('cruisesettings Entity'),
      'controller class' => 'cruisesettingsController',
      'base table' => 'cruisesettings',
      'uri callback' => 'cruisesettings_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
      ),
      'static cache' => TRUE,
      'bundles' => array(
          'cruisesettings_bundle' => array(
              'label' => 'cruisesettings',
              'admin' => array(
                  'path' => 'admin/structure/cruisesettings/manage',
                  'access arguments' => array('administer cruisesettings entities'),
              ),
          ),
      ),
      'view modes' => array(
          'full' => array(
              'label' => t('Full'),
              'custom settings' => FALSE,
          ),
      )
  );
  return $cruisesettings_info;
}

function cruisesettings_page_title($cruisesettings) {
  return 'Settings';
}

function cruisesettings_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $cruisesettings = cruisesettings_load_multiple($ids, array(), $reset);
  return $cruisesettings ? reset($cruisesettings) : FALSE;
}

function cruisesettings_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('cruisesettings', $ids, $conditions, $reset);
}

function cruisesettings_uri($basic) {
  return array(
      'path' => 'cruisesettings/' . $cruisesettings->id,
  );
}

function cruisesettings_admin_page() {
  $output = 'Admin page for cruisesettings entities.<br/>';
  $output .= '<a href="'.base_path().'cruisesettings/add">Add Settings</a>';

  return $output;
}

//List View

/**
 * Returns a render array with all userdocuments entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function cruisesettings_list_view() {
  global $user;

    drupal_add_css(drupal_get_path('module', 'cruisesettings') . '/cruisesettings.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
//    drupal_add_js(drupal_get_path('module', 'userdocuments') . '/js/userdocuments.js');
  // Initialising output
  $output = '';
  $output.='<h1>Cruise Settings</h1>';
  // Table header
  $header = array(
      array('data' => 'Id', 'field' => 'id'),
      array('data' => 'stock', 'field' => 'stock'),
      
      array('data' => 'Actions'),
  );
  // Setting the sort conditions
  if (isset($_GET['sort']) && isset($_GET['order'])) {
    // Sort it Ascending or Descending?
    if ($_GET['sort'] == 'asc')
      $sort = 'ASC';
    else
      $sort = 'DESC';

    // Which column will be sorted
  } else {
    $sort = 'ASC';
    $order = 'id';
  }


  $query = db_select("cruisesettings", "n");

  // Adding fields

     
  
  $query->fields('n', array('id',
      'stock'
      
     ));

  // Set order by
  $query->orderBy($order, $sort);
  // Pagination
  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);
  // Executing query
  $result = $query->execute();
//    $pageurl = drupal_get_destination();
  // Looping for filling the table rows

  while ($data = $result->fetchObject()) {
    // Adding the rows
    $rows[] = array(
        
        $data->id,
        $data->stock,
        
      '<a href="' .base_path().'cruisesettings/'.$data->id . '">View</a>&nbsp;&nbsp;|&nbsp;&nbsp;<a href="' .base_path().'cruisesettings/'.$data->id . '/edit">Edit</a>'
    );
  }
  //Setting the output of the field
  $output .= theme_table(
                  array(
                      'header' => $header,
                      'rows' => $rows,
                      'attributes' => array('class' => array('table table-striped table-bordered')),
                      'sticky' => true,
                      'caption' => '',
                      'colgroups' => array(),
                      'empty' => t("No Records!") //The message to be displayed if table is empty
                  )
          ) . theme('pager');



  return $output;
}

//end of List_view
//Entity page view

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function cruisesettings_page_view($entity, $view_mode = 'tweaky') {
    
  drupal_add_css(drupal_get_path('module', 'cruisesettings') . '/cruisesettings.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  // Our entity type, for convenience.
  $entity_type = 'cruisesettings';
  // Start setting up the content.
  $entity->content = array(
      '#view_mode' => $view_mode,
  );

  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  //RequestQuote Id
  $entity->content['id'] = array(
      '#type' => 'item',
      '#prefix' => '<div class="detailBackLink"><a href="'.base_path().'cruisesettings"><img src="'.base_path().'sites/all/modules/custom/cruisesdetailview/images/back_arrow.png"> BACK TO SETTINGS</a></div><div class="checkoutViewpage">',
      '#title' => t('Id'),
      '#markup' => $entity->id,
  );

  

   
        
  $entity->content['stock'] = array(
      '#type' => 'item',
      '#title' => t('Defaultstock'),
      '#markup' => $entity->stock,
  );

      


  //EventType Values 
  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  // Now invoke hook_entity_view_alter().
//  drupal_alter(array('userdocuments_view', 'entity_view'), $entity->content, $entity_type);
  // And finally return the content.
  return $entity->content;
}

//Entity Page view gets 

function cruisesettings_item_edit($cruisesettings) {
    
  drupal_add_css(drupal_get_path('module', 'cruisesettings') . '/cruisesettings.css', array('group' => CSS_DEFAULT, 'type' => 'file'));

  drupal_set_title(t('<em>Edit cruisesettings entity</em> @title', array('@title' =>
      'Settings')), PASS_THROUGH);
  return drupal_get_form('cruisesettings_add_form', $cruisesettings);
  
}

function cruisesettings_add() {
  $cruisesettings = (object) array(
             
      
    
      
      'stock' => '', //Values which are in saparated by comma.
             
  );

  return drupal_get_form('cruisesettings_add_form', $cruisesettings);
}

function cruisesettings_add_form($form, &$form_state, $cruisesettings) {

  if (isset($cruisesettings->id) && ($cruisesettings->id != null)) {
    $form['id'] = array(
        '#type' => 'hidden',
        '#title' => t('id'),
        '#default_value' => $cruisesettings->id,
        '#required' => TRUE,
    );
  }
  else {
   
  }

  $form['stock'] = array(
      '#type' => 'textfield',
      '#title' => t('stock'),
      '#default_value' => $cruisesettings->stock,
      '#required' => TRUE,
  );


  
  field_attach_form('cruisesettings', $cruisesettings, $form, $form_state);
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 100,
  );
  return $form;
}

function cruisesettings_field_extra_fields() {
  $form_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  

       
             
              
  //Event Type
  $form_elements['stock'] = array(
      'label' => t('Defaultstock'),
      'description' => t('stock (an extra form field)'),
      'weight' => -5,
  );
 
  //
//    
$display_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  

       
             
              
  //Event Type
  $display_elements['stock'] = array(
      'label' => t('DefaultStock'),
      'description' => t('stock (an extra form field)'),
      'weight' => -5,
  );
  

  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['cruisesettings']['cruisesettings_bundle']['form'] = $form_elements;
  $extra_fields['cruisesettings']['cruisesettings_bundle']['display'] = $display_elements;

  return $extra_fields;
}

function cruisesettings_add_form_validate($form, &$form_state) {
  $cruisesettings_submission = (object) $form_state['values'];
  field_attach_form_validate('cruisesettings', $cruisesettings_submission, $form, $form_state);
}

function cruisesettings_add_form_submit($form, &$form_state) {
  $cruisesettings_submission = (object) $form_state['values'];
  field_attach_submit('cruisesettings', $cruisesettings_submission, $form, $form_state);
  $cruisesettings = cruisesettings_save($cruisesettings_submission);
  $form_state['redirect'] = 'cruisesettings/' . $cruisesettings->id;
}

function cruisesettings_save(&$cruisesettings) {

  return entity_get_controller('cruisesettings')->save($cruisesettings);
}

class cruisesettingsController extends DrupalDefaultEntityController {

  public function save($cruisesettings) {
   
    if (isset($cruisesettings->id) && ($cruisesettings->id != null)) {
      drupal_write_record('cruisesettings', $cruisesettings, array('id'));
      field_attach_update('cruisesettings', $cruisesettings);
    }
    else {
      drupal_write_record('cruisesettings', $cruisesettings);
      field_attach_insert('cruisesettings', $cruisesettings);
    }
    module_invoke_all('entity_insert', $cruisesettings, 'cruisesettings');
        return $cruisesettings;
  }

}