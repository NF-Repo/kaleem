<?php

/**
 * Implements hook_menu().
 */
function checkfrontadmin_menu() {
  //Admin Management for Request Quote

  $items['checkfrontadmin'] = array(
      'title' => 'Entity checkfrontadmin Application form',
      'page callback' => 'checkfrontadmin_list_view',
      'access arguments' => array('view checkfrontadmin entity'),
  );

  $items['admin/structure/checkfrontadmin/manage'] = array(
      'title' => 'Request Quote Admin',
      'description' => 'Manage Request Quote Structure',
      'page callback' => 'checkfrontadmin_admin_page',
      'access arguments' => array('administer Request Quote entities'),
  );

  //Detailed View for Request Quote
  $items['checkfrontadmin/%checkfrontadmin'] = array(
      'title callback' => 'checkfrontadmin_page_title',
      'title arguments' => array(1),
      'page callback' => 'checkfrontadmin_page_view',
      'page arguments' => array(1),
      'access arguments' => array('view checkfrontadmin entities'),
      'type' => MENU_CALLBACK,
  );


  //Request Quote View
  $items['checkfrontadmin/%checkfrontadmin/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );


  //Request Quote Edit
  $items['checkfrontadmin/%checkfrontadmin/edit'] = array(
      'title' => 'Edit',
      'load arguments' => array('checkfrontadmin'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'checkfrontadmin_item_edit',
      'access arguments' => array('edit checkfrontadmin entities'),
      'page arguments' => array(1),
  );

  //Request Quote Add
  $items['checkfrontadmin/add'] = array(
      'title' => 'Add checkfrontadmin',
      'page callback' => 'checkfrontadmin_add',
      'access arguments' => array('create checkfrontadmin entities'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function checkfrontadmin_permission() {
  return array(
      'administer checkfrontadmin entities' => array(
          'title' => t('Administer checkfrontadmin entities'),
          'restrict access' => TRUE,
      ),
      'view checkfrontadmin entities' => array(
          'title' => t('View checkfrontadmin Entities'),
      ),
      'create checkfrontadmin entities' => array(
          'title' => t('Create checkfrontadmin Entities'),
      ),
  );
}

/**
 * Implements hook_entity_info().
 */
function checkfrontadmin_entity_info() {
  $checkfrontadmin_info['checkfrontadmin'] = array(
      'label' => t('checkfrontadmin Entity'),
      'controller class' => 'checkfrontadminController',
      'base table' => 'checkfrontadmin',
      'uri callback' => 'checkfrontadmin_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
      ),
      'static cache' => TRUE,
      'bundles' => array(
          'checkfrontadmin_bundle' => array(
              'label' => 'checkfrontadmin',
              'admin' => array(
                  'path' => 'admin/structure/checkfrontadmin/manage',
                  'access arguments' => array('administer checkfrontadmin entities'),
              ),
          ),
      ),
      'view modes' => array(
          'full' => array(
              'label' => t('Full'),
              'custom settings' => FALSE,
          ),
      )
  );
  return $checkfrontadmin_info;
}

function checkfrontadmin_page_title($checkfrontadmin) {
  return 'Checkfront Admin';
}

function checkfrontadmin_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $checkfrontadmin = checkfrontadmin_load_multiple($ids, array(), $reset);
  return $checkfrontadmin ? reset($checkfrontadmin) : FALSE;
}

function checkfrontadmin_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('checkfrontadmin', $ids, $conditions, $reset);
}

function checkfrontadmin_uri($basic) {
  return array(
      'path' => 'checkfrontadmin/' . $checkfrontadmin->id,
  );
}

function checkfrontadmin_admin_page() {
  $output = 'Admin page for checkfrontadmin entities.<br/>';
  $output .= '<a href="/checkfrontadmin/add">Add checkfrontadmin entity</a>';

  return $output;
}

//List View

/**
 * Returns a render array with all userdocuments entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function checkfrontadmin_list_view() {
  global $user;

    drupal_add_css(drupal_get_path('module', 'checkfrontadmin') . '/checkfrontadmin.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
//    drupal_add_js(drupal_get_path('module', 'userdocuments') . '/js/userdocuments.js');
  // Initialising output
  $output = '';
  $output.='<h1>Checkfront API Credentials</h1>';
  // Table header
  $header = array(
      array('data' => 'Id', 'field' => 'id'),
      array('data' => 'host', 'field' => 'host'),
      array('data' => 'consumerKey', 'field' => 'consumerKey'),
      array('data' => 'consumerSecret', 'field' => 'consumerSecret'),
//      array('data' => 'redirectUri', 'field' => 'redirectUri'),
//      array('data' => 'refreshToken', 'field' => 'refreshToken'),
//      array('data' => 'accessToken', 'field' => 'accessToken'),
//      array('data' => 'mode', 'field' => 'mode'),
//      array('data' => 'tokenexpire', 'field' => 'tokenexpire'),
//      array('data' => 'tokenupdated', 'field' => 'tokenupdated'),
//      array('data' => 'created', 'field' => 'created'),
      array('data' => 'Actions'),
  );
  // Setting the sort conditions
  if (isset($_GET['sort']) && isset($_GET['order'])) {
    // Sort it Ascending or Descending?
    if ($_GET['sort'] == 'asc')
      $sort = 'ASC';
    else
      $sort = 'DESC';

    // Which column will be sorted
  } else {
    $sort = 'ASC';
    $order = 'id';
  }


  $query = db_select("checkfrontadmin", "n");

  // Adding fields

     
  
  $query->fields('n', array('id',
      'host',
      'consumerKey',
      'consumerSecret',
      'redirectUri',
      'refreshToken',
      'accessToken',
      'mode',
      'tokenexpire',
      'tokenupdated',
     ));

  // Set order by
  $query->orderBy($order, $sort);
  // Pagination
  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);
  // Executing query
  $result = $query->execute();
//    $pageurl = drupal_get_destination();
  // Looping for filling the table rows

  while ($data = $result->fetchObject()) {
    // Adding the rows
    $rows[] = array(
        
        
        
        $data->id,
        $data->host,
        $data->consumerKey,
        $data->consumerSecret,
//     $data->redirectUri,
//      $data->refreshToken,
//      $data->accessToken,
//      $data->mode,
//      $data->tokenexpire,
//      $data->tokenupdated,
      '<a href="' .base_path().'checkfrontadmin/'.$data->id . '">View</a>&nbsp;&nbsp;|&nbsp;&nbsp;<a href="' .base_path().'checkfrontadmin/'.$data->id . '/edit">Edit</a>'
    );
  }
  //Setting the output of the field
  $output .= theme_table(
                  array(
                      'header' => $header,
                      'rows' => $rows,
                      'attributes' => array('class' => array('table table-striped table-bordered')),
                      'sticky' => true,
                      'caption' => '',
                      'colgroups' => array(),
                      'empty' => t("No Records!") //The message to be displayed if table is empty
                  )
          ) . theme('pager');



  return $output;
}

//end of List_view
//Entity page view

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function checkfrontadmin_page_view($entity, $view_mode = 'tweaky') {
    
  drupal_add_css(drupal_get_path('module', 'checkfrontadmin') . '/checkfrontadmin.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  // Our entity type, for convenience.
  $entity_type = 'checkfrontadmin';
  // Start setting up the content.
  $entity->content = array(
      '#view_mode' => $view_mode,
  );

  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  //RequestQuote Id
  $entity->content['id'] = array(
      '#type' => 'item',
      '#prefix' => '<div class="detailBackLink"><a href="'.base_path().'checkfrontadmin"><img src="'.base_path().'sites/all/modules/custom/cruisesdetailview/images/back_arrow.png"> BACK TO CHECKFRONT API CREDENTIALS</a></div><div class="checkoutViewpage">',
      '#title' => t('Id'),
      '#markup' => $entity->id,
  );

  

   
        
  $entity->content['host'] = array(
      '#type' => 'item',
      '#title' => t('Host'),
      '#markup' => $entity->host,
  );

        
  $entity->content['consumerKey'] = array(
      '#type' => 'item',
      '#title' => t('ConsumerKey'),
      '#markup' => $entity->consumerKey,
  );

   
     
  
 
  $entity->content['consumerSecret'] = array(
      '#type' => 'item',
      '#title' => t('Consumer Secret'),
      '#markup' => $entity->consumerSecret,
  );

  $entity->content['redirectUri'] = array(
      '#type' => 'item',
      '#title' => t('Redirect Uri'),
      '#markup' => $entity->redirectUri,
  );

  $entity->content['refreshToken'] = array(
      '#type' => 'item',
      '#title' => t('Refresh Token'),
      '#markup' => $entity->refreshToken,
  );

  $entity->content['accessToken'] = array(
      '#type' => 'item',
      '#title' => t('Access Token'),
      '#markup' => $entity->accessToken,
  );

  $entity->content['mode'] = array(
      '#type' => 'item',
      '#title' => t('Mode'),
      '#markup' => $entity->mode,
  );
  $entity->content['tokenexpire'] = array(
      '#type' => 'item',
      '#title' => t('Token Expire'),
      '#markup' => $entity->tokenexpire,
  );
  $entity->content['tokenupdated'] = array(
      '#type' => 'item',
      '#sufix' => '</div>',
      '#title' => t('Token Updated'),
      '#markup' => $entity->tokenupdated,
  );
  


  //EventType Values 
  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  // Now invoke hook_entity_view_alter().
//  drupal_alter(array('userdocuments_view', 'entity_view'), $entity->content, $entity_type);
  // And finally return the content.
  return $entity->content;
}

//Entity Page view gets 

function checkfrontadmin_item_edit($checkfrontadmin) {
    
  drupal_add_css(drupal_get_path('module', 'checkfrontadmin') . '/checkfrontadmin.css', array('group' => CSS_DEFAULT, 'type' => 'file'));

  drupal_set_title(t('<em>Edit checkfrontadmin entity</em> @title', array('@title' =>
      'RequestQuote')), PASS_THROUGH);
  return drupal_get_form('checkfrontadmin_add_form', $checkfrontadmin);
  
}

function checkfrontadmin_add() {
  $checkfrontadmin = (object) array(
             
      
    
      
      'host' => '', //Values which are in saparated by comma.
              'consumerKey' => '',
              'consumerSecret' => '',
              'redirectUri' => '',
              'refreshToken' => '',
              'accessToken' => '',
              'mode' => '',
              'tokenexpire' => '',
              'tokenupdated' => '',
              'created' => REQUEST_TIME
  );

  return drupal_get_form('checkfrontadmin_add_form', $checkfrontadmin);
}

function checkfrontadmin_add_form($form, &$form_state, $checkfrontadmin) {

  if (isset($checkfrontadmin->id) && ($checkfrontadmin->id != null)) {
    $form['id'] = array(
        '#type' => 'hidden',
        '#title' => t('id'),
        '#default_value' => $checkfrontadmin->id,
        '#required' => TRUE,
    );
  }
  else {
    $form['created'] = array(
        '#type' => 'hidden',
        '#title' => t('created'),
        '#default_value' => $checkfrontadmin->created,
    );
  }

  $form['host'] = array(
      '#type' => 'textfield',
      '#title' => t('host'),
      '#default_value' => $checkfrontadmin->host,
      '#required' => TRUE,
  );

  $form['consumerKey'] = array(
      '#type' => 'textfield',
      '#title' => t('consumerKey'),
      '#default_value' => $checkfrontadmin->consumerKey,
      '#required' => TRUE,
  );
$form['consumerSecret'] = array(
      '#type' => 'textfield',
      '#title' => t('consumerSecret'),
      '#default_value' => $checkfrontadmin->consumerSecret,
      '#required' => TRUE,
  );
  $form['redirectUri'] = array(
      '#type' => 'textfield',
      '#title' => t('redirectUri'),
      '#default_value' => $checkfrontadmin->redirectUri,
      '#required' => TRUE,
  );

  $form['refreshToken'] = array(
      '#type' => 'textfield',
      '#title' => t('refreshToken'),
      '#default_value' => $checkfrontadmin->refreshToken,
      '#required' => TRUE,
  );
  
  $form['mode'] = array(
      '#type' => 'textfield',
      '#title' => t('mode'),
      '#default_value' => $checkfrontadmin->mode,
      '#required' => TRUE,
  );


  
  field_attach_form('checkfrontadmin', $checkfrontadmin, $form, $form_state);
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 100,
  );
  return $form;
}

function checkfrontadmin_field_extra_fields() {
  $form_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  

       
             
              
  //Event Type
  $form_elements['host'] = array(
      'label' => t('host'),
      'description' => t('host (an extra form field)'),
      'weight' => -5,
  );
  $form_elements['consumerKey'] = array(
      'label' => t('consumerKey'),
      'description' => t('consumerKey (an extra form field)'),
      'weight' => -5,
  );
  //
//   
  $form_elements['consumerSecret'] = array(
      'label' => t('consumerSecret'),
      'description' => t('consumerSecret (an extra form field)'),
      'weight' => -5,
  );
//   

     
             
  $form_elements['redirectUri'] = array(
      'label' => t('redirectUri'),
      'description' => t('redirectUri (an extra form field)'),
      'weight' => -5,
  );

//    
  $form_elements['refreshToken'] = array(
      'label' => t('refreshToken'),
      'description' => t('refreshToken (an extra form field)'),
      'weight' => -5,
  );

  $form_elements['accessToken'] = array(
      'label' => t('accessToken'),
      'description' => t('accessToken (an extra form field)'),
      'weight' => -5,
  );

//     
  $form_elements['mode'] = array(
      'label' => t('mode'),
      'description' => t('mode (an extra form field)'),
      'weight' => -5,
  );

  //bestTimetoCall
  $form_elements['tokenexpire'] = array(
      'label' => t('tokenexpire'),
      'description' => t('tokenexpire (an extra form field)'),
      'weight' => -5,
  );
  //
  //
         $form_elements['tokenupdated'] = array(
      'label' => t('tokenupdated'),
      'description' => t('tokenupdated (an extra form field)'),
      'weight' => -5,
  );
  


  //
//    
$display_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  

       
             
              
  //Event Type
  $display_elements['host'] = array(
      'label' => t('host'),
      'description' => t('host (an extra form field)'),
      'weight' => -5,
  );
  $display_elements['consumerKey'] = array(
      'label' => t('consumerKey'),
      'description' => t('consumerKey (an extra form field)'),
      'weight' => -5,
  );
  //
//   
  $display_elements['consumerSecret'] = array(
      'label' => t('consumerSecret'),
      'description' => t('consumerSecret (an extra form field)'),
      'weight' => -5,
  );
//   

     
             
  $display_elements['redirectUri'] = array(
      'label' => t('redirectUri'),
      'description' => t('redirectUri (an extra form field)'),
      'weight' => -5,
  );

//    
  $display_elements['refreshToken'] = array(
      'label' => t('refreshToken'),
      'description' => t('refreshToken (an extra form field)'),
      'weight' => -5,
  );

  $display_elements['accessToken'] = array(
      'label' => t('accessToken'),
      'description' => t('accessToken (an extra form field)'),
      'weight' => -5,
  );

//     
  $display_elements['mode'] = array(
      'label' => t('mode'),
      'description' => t('mode (an extra form field)'),
      'weight' => -5,
  );

  //bestTimetoCall
  $display_elements['tokenexpire'] = array(
      'label' => t('tokenexpire'),
      'description' => t('tokenexpire (an extra form field)'),
      'weight' => -5,
  );
  //
  //
         $display_elements['tokenupdated'] = array(
      'label' => t('tokenupdated'),
      'description' => t('tokenupdated (an extra form field)'),
      'weight' => -5,
  );
         

  

  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['checkfrontadmin']['checkfrontadmin_bundle']['form'] = $form_elements;
  $extra_fields['checkfrontadmin']['checkfrontadmin_bundle']['display'] = $display_elements;

  return $extra_fields;
}

function checkfrontadmin_add_form_validate($form, &$form_state) {
  $checkfrontadmin_submission = (object) $form_state['values'];
  field_attach_form_validate('checkfrontadmin', $checkfrontadmin_submission, $form, $form_state);
}

function checkfrontadmin_add_form_submit($form, &$form_state) {
  $checkfrontadmin_submission = (object) $form_state['values'];
  field_attach_submit('checkfrontadmin', $checkfrontadmin_submission, $form, $form_state);
  $checkfrontadmin = checkfrontadmin_save($checkfrontadmin_submission);
  $form_state['redirect'] = 'checkfrontadmin/' . $checkfrontadmin->id;
}

function checkfrontadmin_save(&$checkfrontadmin) {

  return entity_get_controller('checkfrontadmin')->save($checkfrontadmin);
}

class checkfrontadminController extends DrupalDefaultEntityController {

  public function save($checkfrontadmin) {
   
    if (isset($checkfrontadmin->id) && ($checkfrontadmin->id != null)) {
      drupal_write_record('checkfrontadmin', $checkfrontadmin, array('id'));
      field_attach_update('checkfrontadmin', $checkfrontadmin);
    }
    else {
      drupal_write_record('checkfrontadmin', $checkfrontadmin);
      field_attach_insert('checkfrontadmin', $checkfrontadmin);
    }
    module_invoke_all('entity_insert', $checkfrontadmin, 'checkfrontadmin');
        return $checkfrontadmin;
  }

}