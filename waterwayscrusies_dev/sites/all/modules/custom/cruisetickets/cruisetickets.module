<?php
class CruiseTickets{
	public static function getParentTicketID($id){
		try{
			$cruiseTicket=cruisetickets_load($id);
			$parentid='';
			if($cruiseTicket->parentticketid!=''){
				$parentid=$cruiseTicket->parentticketid;
			}
			
		}catch(Exception $e){
			
		}
		
		return $parentid;
	}
	
	
	public static function isTaxableTicket($id){
		$result=false;
		try{
			$cruiseTicketObject=cruisetickets_load($id);
			$parentid='';
			if($cruiseTicketObject->is_taxable==1){
				$result=true;
			}
				
		}catch(Exception $e){
				
		}
		
		return $result;
	}
	
	public static function isChildTicket($id){
		
		
		$result=false;
		try{
			$cruiseTicketObject=cruisetickets_load($id);
			$parentid='';
			if($cruiseTicketObject->is_childticket==1){
				$result=true;
			}
	
		}catch(Exception $e){
	
		}
		return $result;
	}
	
	
}
/**
 * Implements hook_menu().
 */
function cruisetickets_menu() {
  //Admin Management for Request Quote

  $items['cruisetickets'] = array(
      'title' => 'Tickets',
      'page callback' => 'cruisetickets_list_view',
      'access arguments' => array('view cruisetickets entities'),
  );

  $items['admin/structure/cruisetickets/manage'] = array(
      'title' => 'Cruise Tickets',
      'description' => 'Manage Cruise Tickets System Structure',
      'page callback' => 'cruisetickets_admin_page',
      'access arguments' => array('administer cruisetickets entities'),
  );

  //Detailed View for Enhancements
  $items['cruisetickets/%cruisetickets'] = array(
      'title callback' => 'cruisetickets_page_title',
      'title arguments' => array(1),
      'page callback' => 'cruisetickets_page_view',
      'page arguments' => array(1),
      'access arguments' => array('view cruisetickets entities'),
      'type' => MENU_CALLBACK,
  );


  
  $items['cruisetickets/%cruisetickets/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );


  
  $items['cruisetickets/%cruisetickets/edit'] = array(
      'title' => 'Edit',
      'load arguments' => array('cruisetickets'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'cruisetickets_item_edit',
      'access arguments' => array('edit cruisetickets entities'),
      'page arguments' => array(1),
  );

  
  
  
  
//  $items['cruisetickets/entrees'] = array(
//  		'title' => 'Entrees',
//  		'page callback' => 'drupal_get_form',
//  		'page arguments' => array('tickets_entrees_assign_form'),
//  		'access callback' =>TRUE,
////   		'access arguments' => array(1),
//  		'weight' => 10,
//  		'type' => MENU_LOCAL_TASK,
//  		'file' => 'cruisetickets.admin.inc',
//  );
  
  
  
  //creating the Fees tickets assignement sectiopn
  $items['cruisetickets/fees']=array(
  	'title'=>'Fees',
  		'page callback'=>'drupal_get_form',
  		'page arguments'=>array('tickets_assign_fees_form'),
  		'access callback'=>TRUE,
  		'weight'=>11,
  		'type'=>MENU_LOCAL_TASK,
  		'file'=>'cruisetickets.admin.inc'
  );
  
  
  
  
  
  
  
  
  
  
  
  
  
  $items['cruisetickets/add'] = array(
      'title' => 'Add Cruise Tickets',
      'page callback' => 'cruisetickets_add',
      'access arguments' => array('create cruisetickets entities'),
  );
  
  // Delete Cruise
  $items ['cruisetickets/%/delete'] = array (
  		'page callback' => 'cruisetickets_item_delete',
  		'access arguments' => array ('delete cruisetickets entities'),
  		'page arguments' => array (1),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function cruisetickets_permission() {
  return array(
      'administer cruisetickets entities' => array(
          'title' => t('Administer Cruise Tickets Entities'),
          'restrict access' => TRUE,
      ),
  		
      'view cruisetickets entities' => array(
          'title' => t('View Cruise Tickets Entities'),
      ),
      'create cruisetickets entities' => array(
          'title' => t('Create cruise Tickets Entities'),
      ),
  		
  		'edit cruisetickets entities' => array(
  				'title' => t('Edit cruisetickets entities'),
  		),
  		
  		'delete cruisetickets entities' => array (
  				'title' => t ( 'Delete cruisetickets entities' )
  		),
  		
  		
  		
  );
}

/**
 * Implements hook_entity_info().
 */
function cruisetickets_entity_info() {
  $cruisetickets_info['cruisetickets'] = array(
      'label' => t('cruisetickets Entity'),
      'controller class' => 'cruiseticketsController',
      'base table' => 'cruisetickets',
      'uri callback' => 'cruisetickets_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
      ),
      'static cache' => TRUE,
      'bundles' => array(
          'cruisetickets_bundle' => array(
              'label' => 'cruisetickets',
              'admin' => array(
                  'path' => 'admin/structure/cruisetickets/manage',
                  'access arguments' => array('administer cruisetickets entities'),
              ),
          ),
      ),
      'view modes' => array(
          'full' => array(
              'label' => t('Full'),
              'custom settings' => FALSE,
          ),
      )
  );
  return $cruisetickets_info;
}

function cruisetickets_page_title($cruisetickets) {
  return 'Enhancements';
}

function cruisetickets_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $cruisetickets = cruisetickets_load_multiple($ids, array(), $reset);
  return $cruisetickets ? reset($cruisetickets) : FALSE;
}

function cruisetickets_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('cruisetickets', $ids, $conditions, $reset);
}

function cruisetickets_uri($basic) {
  return array(
      'path' => 'cruisetickets/' . $cruisetickets->id,
  );
}

function cruisetickets_admin_page() {
//   $output = 'Admin page for cruisetickets entities.<br/>';
  //There is no cruisetickets add system
  //$output .= '';
  //$output .= '<a href='.base_path().'cruisetickets/add>Add Ticket</a>';
  $output .= cruisetickets_list_view();
  return $output;
}

//List View

/**
 * Returns a render array with all userdocuments entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */


function cruisetickets_list_form_validate($form, &$form_state){
	if ($form_state['triggering_element']['#value'] == 'Go') {
		$form_state['rebuild'] = TRUE;
		return;
	}
}


function cruisetickets_list_form($form,&$form_state){
  global $user;
  global $base_url;
  
  
  if(isset($form_state['values']['ticketoption'])){
		$_SESSION ['ticketoption']=$form_state['values']['ticketoption'];
	}

	$form['ticketoption']=array(
			'#type'=>'select',
			'#options'=>drupal_map_assoc(array('All','Active','Inactive')),
			'#default_value' => isset($_SESSION['ticketoption']) ? $_SESSION['ticketoption'] : '',
			'#prefix' => '<div class="row-fluid"><div class="span2">',
			'#suffix' => '</div>',
			'#attributes' => array('class' => array('input-medium')),
	);

	$form['btn']=array(
			'#type'=>'submit',
			'#value'=>'Go',
			'#prefix' => '<div class="span10" style="margin-left: 0px;">',
			'#suffix' => '</div></div>',
	);
        
        
        //header links
 	$tabmenuhtml='<ul class="nav nav-pills">
			<li class="active">
    		<a href="'.base_path().'cruisetickets">Tickets</a>
    		</li>
	  	
    				
    				
    				<li class="">
    		<a href="'.base_path().'cruisetickets/fees">Fees</a>
    		</li>
   </ul>';
  
  // end of header links
  
  $output = '';
  $output .= '<a href='.base_path().'cruisetickets/add>Add Ticket</a>';
  // Table header
  $header = array(
      array('data' => 'Id', 'field' => 'id'),
      array('data' => 'Title', 'field' => 'title'),
      array('data' => 'Actions'),
      array('data' => 'Status'),
  );
  
    // Setting the sort conditions
  if (isset ( $_GET ['sort'] ) && isset ( $_GET ['order'] )) {
  	if ($_GET ['sort'] == 'asc')
  		$sort = 'ASC';
  	else
  		$sort = 'DESC';
  
  	switch ($_GET ['order']) {
  		case 'Id' :
  			$order = 'id';
  			break;
  		case 'Title' :
  			$order = 'title';
  			break;
  	}
  } else {
  	$sort = 'ASC';
  	$order = 'id';
  }
  
  
  


  $query = db_select("cruisetickets", "n");

  // Adding fields
  $query->fields('n', array('id', 'title','ticket_status'));

  // Set order by
  $query->orderBy($order, $sort);
  // Pagination
  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);
  
  if(isset($_SESSION['ticketoption'])){
  	if($_SESSION['ticketoption']=='Active'){
  		$query->condition('ticket_status','1','=');
  	}else if($_SESSION['ticketoption']=='Inactive'){
  		$query->condition('ticket_status','0','=');
  	}
  }
  
  
        
        
  // Executing query
  $result = $query->execute();
//    $pageurl = drupal_get_destination();
  // Looping for filling the table rows

  while ($data = $result->fetchObject()) {
      $status=($data->ticket_status==1) ? "checked" : "unchecked";
    // Adding the rows
    $rows[] = array(
        $data->id,
        $data->title,
    		
    		'<a href="' . $base_url . '/cruisetickets/' . $data->id . '/edit">Edit |</a>
    		<a href="' . $base_url . '/cruisetickets/' . $data->id . '/delete">Delete </a>
               ',
                '<input type="checkbox"'.$status.' disabled="disabled">',
    		
        
       
    );
  }
  //Setting the output of the field
  $output .= theme_table(
                  array(
                      'header' => $header,
                      'rows' => $rows,
                  	  'class' => array('draggable'),
                      'attributes' => array('class' => array('')),
                      'sticky' => true,
                      'caption' => '',
                      'colgroups' => array(),
                      'empty' => t("No Records!") //The message to be displayed if table is empty
                  )
          ) . theme('pager');

  $form['outputmarkup'] = array(
			'#type' => 'markup',
						'#markup'=>$tabmenuhtml.$output
	);
	return $form;


  //return $tabmenuhtml.$output;
    
    
}
function cruisetickets_list_view() {
  return drupal_get_form('cruisetickets_list_form');
}

//end of List_view
//Entity page view

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function cruisetickets_page_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'cruisetickets';
  // Start setting up the content.
  $entity->content = array(
      '#view_mode' => $view_mode,
  );

  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  //RequestQuote Id
  $entity->content['id'] = array(
      '#type' => 'item',
      '#title' => t('id'),
      '#markup' => $entity->id,
  );

  
  
  
  

 
  
 
  
  
  $entity->content['title'] = array(
      '#type' => 'item',
      '#title' => t('Title'),
      '#markup' => $entity->title,
  );

  $entity->content['ordering'] = array(
      '#type' => 'item',
      '#title' => t('ordering'),
      '#markup' => $entity->ordering,
  );

  //EventType Values 
  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  

  // And finally return the content.
  return $entity->content;
}

//Entity Page view gets 

function cruisetickets_item_edit($cruisetickets) {

  drupal_set_title(t('Edit Cruise Ticket  @title', array('@title' =>
      '')), PASS_THROUGH);
  return drupal_get_form('cruisetickets_add_form', $cruisetickets);
}

function cruisetickets_add() {
  $cruisetickets = (object) array(
      	'title'=>'',
  		'ordering'=>'',
  		'created' => REQUEST_TIME
  );

  return drupal_get_form('cruisetickets_add_form', $cruisetickets);
}





function cruisetickets_add_form($form, &$form_state, $cruisetickets) {
	
	
	drupal_add_css(drupal_get_path('module', 'cruisetickets') . '/cruisetickets.css');
	
  //cruisetickets_load();
  
	//giftcard_load_multiple($ids = array(), $conditions = array('flag' => 1));
	
	

  if (isset($cruisetickets->id) && ($cruisetickets->id != null)) {
    $form['id'] = array(
        '#type' => 'hidden',
        '#title' => t('id'),
        '#default_value' => $cruisetickets->id,
        '#required' => TRUE,
    );
  }
  else {
    $form['created'] = array(
        '#type' => 'hidden',
        '#title' => t('created'),
        '#default_value' => $cruisetickets->created,
    );
  }

  
  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => $cruisetickets->title,
      '#required' => TRUE,
  );
  
  $form['ticket_status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Active'),
        '#default_value' => isset($cruisetickets->ticket_status) ? $cruisetickets->ticket_status : ''
  );
  
  
  $form['is_childticket'] = array(
  		'#type' => 'checkbox',
  		'#title' => t('Is Child Ticket?'),
  		'#default_value' => isset($cruisetickets->is_childticket) ? $cruisetickets->is_childticket : ''
  );
  
  
  



//   $existingCruiseTickets=cruisetickets_load_multiple($ids = array(), $conditions = array('ticket_status' => 1));
//   $existingticketsarr=array();
//   foreach($existingCruiseTickets as $ticket){
//   	if($cruisetickets->id!=$ticket->id){
//   		$existingticketsarr[$ticket->id]=$ticket->title;
//   	}
  	
//   }
  
  $taxablestatus = array(0 => t('Non-Taxable'), 1 => t('Taxable'));
  $form['is_taxable'] = array(
  		'#type' => 'radios',
  		'#title' => t('Taxed Item'),
  		'#default_value' => isset($cruisetickets->is_taxable) ? $cruisetickets->is_taxable : 0,
  		'#options' => $taxablestatus,
  		'#description' => t('Apply taxes to the specified Ticket.'),
  );
  
  
  /*
  $prntstatus=($cruisetickets->parentticketid!="") ? "yes" : "no"; 
  $form['forkidsunderten'] = array(
  '#type' => 'radios',
  '#options' => array('yes' => t('Yes'), 'no' => t('No')),
  '#title' => t('For Kids under 10?'),
	'#default_value' => $prntstatus,
  );
  $form['parentticket'] = array(
	'#type' => 'select',
    '#title' => t('Adding a parent to a child ticket'),
    '#options' => $existingticketsarr,
	'#states' => array(
      'visible' => array(
        ':input[name="forkidsunderten"]' => array('value' => 'yes'),
  ),
  ),
  ); */

  $form['ordering'] = array(
      '#type' => 'hidden',
      '#title' => t('Ordering'),
      '#default_value' => 0, //$cruisetickets->ordering,
      //'#required' => TRUE,
  );
  

  field_attach_form('cruisetickets', $cruisetickets, $form, $form_state);
  //$form['actions'] = array('#type' => 'actions');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  $form['cancel'] = array(
  		'#type' => 'submit',
  		'#value' => t('Cancel'),
                '#submit' => array('our_callback_for_cancel_buttons'),
                 '#limit_validation_errors' => array(),
 
  );
 
//   $form['actions']['cancel'] = array(
//     '#markup' => l(t('Cancel'), 'foo/bar'),
//   );
  return $form;
}

function our_callback_for_cancel_buttons($form, &$form_state){
    $link = $base_url . '/cruisetickets';
    drupal_goto($link);
}

function cruisetickets_field_extra_fields() {
  $form_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  
  
  
  
  
  
  
  
  
  
  
 
  
  
  
  $form_elements['title'] = array(
      'label' => t('Title'),
      'description' => t('title (an extra form field)'),
      'weight' => -5,
  );
  $form_elements['ordering'] = array(
      'label' => t('ordering'),
      'description' => t('ordering (an extra form field)'),
      'weight' => -5,
  );
  
  
  $display_elements['title'] = array(
      'label' => t('Title'),
      'description' => t('title (an extra form field)'),
      'weight' => -5,
  );
  $display_elements['ordering'] = array(
      'label' => t('ordering'),
      'description' => t('ordering (an extra form field)'),
      'weight' => -5,
  );
  
  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['cruisetickets']['cruisetickets_bundle']['form'] = $form_elements;
  $extra_fields['cruisetickets']['cruisetickets_bundle']['display'] = $display_elements;

  return $extra_fields;
}

function cruisetickets_add_form_validate($form, &$form_state) {
  $cruisetickets_submission = (object) $form_state['values'];
  field_attach_form_validate('cruisetickets', $cruisetickets_submission, $form, $form_state);
}

function cruisetickets_add_form_submit($form, &$form_state) {

 $cruiseticketobj=new stdClass();
 $cruiseticketobj->id=isset($form_state['values']['id']) ? $form_state['values']['id'] : '';
 $cruiseticketobj->title=$form_state['values']['title'];
 $parentstatus=isset($form_state['values']['forkidsunderten']) ? $form_state['values']['forkidsunderten'] : '';
 $cruiseticketobj->is_childticket=$form_state['values']['is_childticket'];
 $cruiseticketobj->is_taxable=$form_state['values']['is_taxable'];
 $cruiseticketobj->ticket_status=$form_state['values']['ticket_status'];
 $cruiseticketobj->created=REQUEST_TIME;

  //$cruisetickets_submission = (object) $form_state['values'];
  $cruisetickets_submission = (object) $cruiseticketobj;
   $msg='';
  $path='cruisetickets';
  if(isset($cruisetickets_submission->id)){
  	$msg='Ticket updated successfully';
  }else{
  	$msg='Ticket created successfully';
  }

  field_attach_submit('cruisetickets', $cruisetickets_submission, $form, $form_state);
  $cruisetickets = cruisetickets_save($cruisetickets_submission);
  //$form_state['redirect'] = 'cruisetickets/' . $cruisetickets->id;
  
  if($cruisetickets){
  	//
  }else{
  $msg="Operation failed";
  }
  drupal_set_message($msg);
  drupal_goto($path);

  
  //$form_state['redirect'] = 'admin/structure/cruisetickets/manage';
}

function cruisetickets_save(&$cruisetickets) {

  return entity_get_controller('cruisetickets')->save($cruisetickets);
}

function cruisetickets_delete($id) {
	return entity_get_controller ( 'cruisetickets' )->delete ( $id );
}





/**
 *
 *
 *
 *
 *
 *
 *
 * @author LSN37
 *
 */
function getTicketslist()
{
	$output=array();
	$result = db_select('cruisetickets', 'c')
	->condition('c.ticket_status','1','=')
	->fields('c')
	
	->execute();
	foreach ($result as $ticket)
	{
		$output[]=$ticket;
	}
	return $output;
}




/**
 *
 *
 * Loading cruise template tickets
 *'ticketid' => string '1' (length=1)
  'price' => string '4.00000' (length=7)
  'ticketname' => string 'General' (length=7)
 *
 */
function getCruisetemplatetickets($templateid,$ticketid)
{
	$output=array();
	$result = db_select('cruise_template_tickets', 'c')
	->fields('c')
	->condition('cruisetemplateid',$templateid,'=')
	->execute();
	foreach ($result as $ticket)
	{
		if($ticketid==$ticket->ticketid)
		{
		$output['ticketid']=$ticket->ticketid;
		$output['price']=$ticket->price;
		//loading the ticket information using ticketid
		$ticketdata=cruisetickets_load($ticketid);
		$output['ticketname']=$ticketdata->title;
		}
		
		
		
	}
	return $output;
}


/**
 * 
 * 
 * Loading the selected cruise template tickets
 * @author LSN37
 *
 */
/**
 *
 *
 * Loading cruise template tickets
 *'ticketid' => string '1' (length=1)
 'price' => string '4.00000' (length=7)
 'ticketname' => string 'General' (length=7)
 *
 */
function getselectedCruisetemplatetickets($templateid)
{
	$output=array();
	$result = db_select('cruise_template_tickets', 'c')
	->fields('c')
	->condition('cruisetemplateid',$templateid,'=')
	->execute();
	foreach ($result as $ticket)
	{
		$output[]=$ticket;
		



	}
	return $output;
}







class cruiseticketsController extends DrupalDefaultEntityController {

  public function save($cruisetickets) {
 
    if (isset($cruisetickets->id) && ($cruisetickets->id != null)) {
      drupal_write_record('cruisetickets', $cruisetickets, array('id'));
      field_attach_update('cruisetickets', $cruisetickets);
    }
    else {
      drupal_write_record('cruisetickets', $cruisetickets);
      field_attach_insert('cruisetickets', $cruisetickets);
    }
    module_invoke_all('entity_insert', $cruisetickets, 'cruisetickets');
        return $cruisetickets;
  }
  
  public function delete($id) {
  	db_delete('cruisetickets')
  	->condition('id', $id, '=')
  	->execute();
  }
}


function cruisetickets_item_delete($id){
	
	$msg = '';
	try {
		cruisetickets_delete ( $id );
		$msg = 'Ticket Deleted Successfully.';
	} catch ( Exception $e ) {
		$msg = 'Operation Failed.';
	}
	drupal_set_message ( $msg );
	drupal_goto ( 'cruisetickets' );
}