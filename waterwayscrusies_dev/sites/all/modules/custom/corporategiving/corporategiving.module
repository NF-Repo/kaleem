<?php

/**
 * Implements hook_menu().
 */
function corporategiving_menu() {

  //corporategiving Add
  $items['corporategiving/add'] = array(
      'title' => 'Add corporategiving',
      'page callback' => 'corporategiving_add',
      'access arguments' => array('create corporategiving entities'),
  );

  $items['corporategivingformlist'] = array(
        'title' => 'Corporate Giving',
        'page callback' => 'corporategiving_list_form',
        'access arguments' => array('view corporategiving entities'),
    );
   //Detailed View for corporategiving
    $items['corporategiving/%corporategiving'] = array(
        'title callback' => 'corporategiving_page_title',
        'title arguments' => array(1),
        'page callback' => 'corporategiving_page_view',
        'page arguments' => array(1),
        'access arguments' => array('view corporategiving entities'),
        'type' => MENU_CALLBACK,
    );


  return $items;
}

/**
 * Implements hook_permission().
 */
function corporategiving_permission() {
  return array(
      'administer corporategiving entities' => array(
          'title' => t('Administer corporategiving entities'),
          'restrict access' => TRUE,
      ),
      'view corporategiving entities' => array(
          'title' => t('View corporategiving Entities'),
      ),
      'create corporategiving entities' => array(
          'title' => t('Create corporategiving Entities'),
      ),
  );
}

/**
 * Implements hook_entity_info().
 */
function corporategiving_entity_info() {
  $corporategiving_info['corporategiving'] = array(
      'label' => t('corporategiving Entity'),
      'controller class' => 'corporategivingController',
      'base table' => 'corporategiving',
      'uri callback' => 'corporategiving_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
      ),
      'static cache' => TRUE,
      'bundles' => array(
          'corporategiving_bundle' => array(
              'label' => 'corporategiving',
              'admin' => array(
                  'path' => 'admin/structure/corporategiving/manage',
                  'access arguments' => array('administer corporategiving entities'),
              ),
          ),
      ),
      'view modes' => array(
          'full' => array(
              'label' => t('Full'),
              'custom settings' => FALSE,
          ),
      )
  );
  return $corporategiving_info;
}

function corporategiving_page_title($corporategiving) {
  return 'Corporate Giving';
}

function corporategiving_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $corporategiving = corporategiving_load_multiple($ids, array(), $reset);
  return $corporategiving ? reset($corporategiving) : FALSE;
}

function corporategiving_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('corporategiving', $ids, $conditions, $reset);
}

function corporategiving_uri($basic) {
  return array(
      'path' => 'corporategiving/' . $corporategiving->id,
  );
}

function corporategiving_admin_page() {
  $output = 'Admin page for corporategiving entities.<br/>';
  $output .= '<a href="/community/add">Add corporategiving entity</a>';

  return $output;
}

function corporategiving_list_form() {
    return drupal_render(drupal_get_form('corporategiving_list_view'));
}

function corporategiving_list_view($form, &$form_state) {
    global $user;
    global $base_url;
    drupal_add_css(drupal_get_path('module', 'corporategiving') . '/corporategiving.css');
 $viewhtml='';
    if (isset($_GET['corporategiving_startdate']['date'])) {
        $corporategiving_startdate = '';
        $corporategiving_starttime = '';
        if ($_GET['corporategiving_startdate']['date'] != '') {
            $corporategiving_startdate = $_GET['corporategiving_startdate']['date'];
            $corporategiving_starttime = strtotime($corporategiving_startdate . " 00:00:00");
            $viewhtml.='corporategiving_startdate[date]='.$corporategiving_startdate;
    
        }
    }
    if (isset($_GET['corporategiving_enddate']['date'])) {
        $corporategiving_enddate = '';
        $corporategiving_endtime = '';
        if ($_GET['corporategiving_enddate']['date'] != '') {
            $corporategiving_enddate = $_GET['corporategiving_enddate']['date'];
            $corporategiving_endtime = strtotime($corporategiving_enddate . " 23:59:59");
            if($viewhtml !=''){
                $viewhtml.='&corporategiving_enddate[date]='.$corporategiving_enddate;
            }else{
                $viewhtml.='corporategiving_enddate[date]='.$corporategiving_enddate;
            } 
        }
    }
    $form['#method'] = 'get';

    $form['corporategiving_startdate'] = array(
        '#id' => 'corporategivingstart_date',
        '#type' => 'date_popup',
        '#date_format' => 'Y-m-d',
        '#title' => t(''),
        '#title_display' => 'invisible',
        '#default_value' => isset($corporategiving_startdate) ? $corporategiving_startdate : '',
        '#description' => '',
        '#attributes' => array('class' => array('dateFieldStyle dateFieldMedium'), 'placeholder' => array('Start Date')),
        '#prefix' => '<div class="row-fluid"><div class="span12"><div class="pull-left">',
        '#suffix' => '</div>',
    );

    $form['corporategiving_enddate'] = array(
        '#id' => 'corporategivingend_date',
        '#type' => 'date_popup',
        '#date_format' => 'Y-m-d',
        '#title' => t(''),
        '#title_display' => 'invisible',
        '#default_value' => isset($corporategiving_enddate) ? $corporategiving_enddate : '',
        '#description' => '',
        '#attributes' => array('class' => array('dateFieldStyle dateFieldMedium'), 'placeholder' => array('End Date')),
        '#prefix' => '<div class="pull-left">',
        '#suffix' => '</div>',
    );

    $form['results_corporategiving'] = array(
        '#type' => 'submit',
        '#name' => 'search_btn_corporategiving',
        '#value' => 'Search',
        '#prefix' => '<div class="pull-left" style="padding:13px;">',
        '#suffix' => '</div>',
    );

    $form['export_corporategiving'] = array(
        '#name' => 'export_btn_corporategiving',
        '#type' => 'submit',
        '#value' => t('Export'),
        '#submit' => array('corporategiving_export'),
        '#prefix' => '<div class="pull-left" style="padding:13px;">',
        '#suffix' => '</div>',
    );


    if (isset($_GET['corporategiving_startdate'])||isset($_GET['corporategiving_enddate'])) {
        $form['clear_export_list_corporategiving'] = array(
            '#name' => 'clear_btn_corporategiving',
            '#type' => 'submit',
            '#value' => t('Clear'),
            '#submit' => array('clear_export_corporategiving'),
            '#prefix' => '<div class="pull-left" style="padding:13px;">',
            '#suffix' => '</div></div></div>',
        );
    }



    if (isset($_GET['export_btn_corporategiving'])) {

        corporategiving_export($_GET);
    }


    if (isset($_GET['clear_btn_corporategiving'])) {
        clear_export_corporategiving($_GET);
    }


    // Initialising output
    $output = '';
    // Table header
    $header = array(
        array('data' => 'Id', 'field' => 'id'),
        array('data' => 'First Name', 'field' => 'first_name'),
        array('data' => 'Last Name', 'field' => 'last_name'),
        array('data' => 'Created Date', 'field' => 'created'),
        array('data' => 'Actions'),
    );
    // Setting the sort conditions


     if (isset($_GET ['sort']) && isset($_GET ['order'])) {
        if ($_GET ['sort'] == 'asc')
            $sort = 'ASC';
        else
            $sort = 'DESC';

        switch ($_GET ['order']) {

            case 'Id':
                $order = 'id';
                break;
            case 'First Name':
                $order = 'first_name';
                break;
            case 'Last Name':
                $order='last_name';
                break;
             case 'Created Date':
                $order='created';
                break;
        }
    } else {
         $sort = 'ASC';
         $order = 'id';
    }


    $query = db_select("corporategiving", "c");

    // Adding fields
    $query->fields('c', array('id', 'first_name', 'last_name', 'created'));

     if ($corporategiving_starttime != '' && $corporategiving_endtime != '') {
        if ($corporategiving_starttime < $corporategiving_endtime != '') {
            $corporategiving_enddate = $corporategiving_enddate . " 23:59:59";
            $corporategiving_startdate = $corporategiving_startdate . " 00:00:00";
            $query->where("c.created >= UNIX_TIMESTAMP('$corporategiving_startdate') and c.created <= UNIX_TIMESTAMP('$corporategiving_enddate')");
        } else {
            drupal_set_message("End date must be Greater than start date");
        }
    }
    

    // Set order by
    $query->orderBy($order, $sort);
    // Pagination
    $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);
    // Executing query
    $result = $query->execute();
//    $pageurl = drupal_get_destination();
    // Looping for filling the table rows

    while ($data = $result->fetchObject()) {
         $viewbtn='';
        if($viewhtml !=''){
            $viewbtn='<a href="' . $base_url . '/corporategiving/' . $data->id . '?'.$viewhtml.'">view </a>';
        }else{
            $viewbtn='<a href="' . $base_url . '/corporategiving/' . $data->id .'">view </a>';
        }
        // Adding the rows
        $rows[] = array(
            $data->id,
            $data->first_name,
            $data->last_name,
            date('m-d-Y', $data->created),
            $viewbtn,
        );
    }
    //Setting the output of the field
    $output .= theme_table(
                    array(
                        'header' => $header,
                        'rows' => $rows,
                        'attributes' => array('class' => array('table table-striped table-bordered')),
                        'sticky' => true,
                        'caption' => '',
                        'colgroups' => array(),
                        'empty' => t("No Records!") //The message to be displayed if table is empty
                    )
            ) . theme('pager');



    $form['outputmarkup'] = array(
        '#type' => 'markup',
        '#markup' => $output
    );
    return $form;
}
function clear_export_corporategiving($params){
    $path = 'corporategivingformlist';
    drupal_goto($path);
}
function corporategiving_export($params) {
    if (isset($params['corporategiving_startdate']['date'])) {
        $corporategiving_startdate = '';
        $corporategiving_starttime = '';
        if ($params['corporategiving_startdate']['date'] != '') {
            $corporategiving_startdate = $params['corporategiving_startdate']['date'];
            $corporategiving_starttime = strtotime($corporategiving_startdate . " 00:00:00");
        }
    }
    if (isset($params['corporategiving_enddate']['date'])) {
        $corporategiving_enddate = '';
        $corporategiving_endtime = '';
        if ($params['corporategiving_enddate']['date'] != '') {
            $corporategiving_enddate = $params['corporategiving_enddate']['date'];
            $corporategiving_endtime = strtotime($corporategiving_enddate . " 23:59:59");
        }
    }

    $header = array(
        0 => 'Id',
        1 => 'Organization requesting donation',
        2 => 'Date of Event',
        3 => 'Description',
        4 => 'Goal your event is trying to reach',
        5 => 'First Name',
        6 => 'Last Name',
        7 => 'Address1',
        8 => 'Address2',
        9 => 'City',
        10 => 'State',
        11 => 'Zipcode',
        12 => 'phone Number',
        13 => 'Email',
        14 => 'Created Date',
    );
    $query = db_select("corporategiving", "c");
    $query->fields('c', array('id',
        'organising_requsting_donation',
        'date_event',
        'description_event',
        'goal_event',
        'first_name',
        'last_name',
        'address1',
        'address2',
        'city',
        'state',
        'zipcode',
        'phone_number',
        'mail',
        'created',
            )
    );


    if ($corporategiving_starttime != '' && $corporategiving_endtime != '') {
        if ($corporategiving_starttime < $corporategiving_endtime != '') {
            $corporategiving_enddate = $corporategiving_enddate . " 23:59:59";
            $corporategiving_startdate = $corporategiving_startdate . " 00:00:00";
            $query->where("c.created >= UNIX_TIMESTAMP('$corporategiving_startdate') and c.created <= UNIX_TIMESTAMP('$corporategiving_enddate')");
        } else {
            drupal_set_message("End date must be Greater than start date");
        }
    }
    $result = $query->execute()->fetchAll();


    global $base_url;
    $rows = array();
//     $rows[] = array(t('#Id'), t('Name'), t('Email'), t('Phone'), t('Orders'), t('Products'), t('Total Amount'));
    if (count($result) > 0) {
        for ($i = 0; $i < count($result); $i ++) {

            $rows [] = array(
                $result [$i]->id,
                $result [$i]->organising_requsting_donation,
                $result [$i]->date_event,
                $result [$i]->description_event,
                $result [$i]->goal_event,
                 $result [$i]->first_name,
                $result [$i]->last_name,
                $result [$i]->address1,
                $result [$i]->address2,
                $result [$i]->city,
                $result [$i]->state,
                $result [$i]->zipcode,
                $result [$i]->phone_number,
                 $result [$i]->mail,
                date('m-d-Y', $result [$i]->created),
            );
        }
    }

    excel_export_data('corporategiving', $header, $rows);
}

function corporategiving_add() {
  $corporategiving = (object) array(
              'type' => '', //Values which are in saparated by comma.
              'organising_requsting_donation' => '',
      //date_event,description_event,goal_event,first_name,last_name,address1,address2,city,state,zipcode,phone_number,mail,confirmmail,captcha,captcha_confirm
              'date_event' => '',
               'description_event' => '',
               'goal_event' => '',
              'first_name' => '',
              'last_name' => '',
              'address1' => '',
              'address2' => '',
              'city' => '',
              'state' => '',
              'zipcode' => '',
              'phone_number' => '',
              'mail' => '',
              'confirmmail' => '',
              'captcha' => '',
              'captcha_confirm' => '',
              'created' => REQUEST_TIME
  );

  return drupal_get_form('corporategiving_add_form', $corporategiving);
}

function corporategiving_add_form($form, &$form_state, $corporategiving) {
//    echo "<pre>";
//    print_r($corporategiving);
//    stdClass Object
//(
//    [type] => 
//    [organising_requsting_donation] => 
//    [date_event] => 
//    [description_event] => 
//    [goal_event] => 
//    [first_name] => 
//    [last_name] => 
//    [address1] => 
//    [city] => 
//    [state] => 
//    [zipcode] => 
//    [address2] => 
//    [city] => 
//    [state] => 
//    [zipcode] => 
//    [phone_number] => 
//    [mail] => 
//    [confirmmail] => 
//    [captcha] => 
//    [captcha_confirm] => 
//    [created] => 1374651738
//)
//    exit();

  if (isset($corporategiving->id) && ($corporategiving->id != null)) {
    $form['id'] = array(
        '#type' => 'hidden',
        '#title' => t('id'),
        '#default_value' => $corporategiving->id,
        '#required' => TRUE,
    );
    } else {
    $form['created'] = array(
        '#type' => 'hidden',
        '#title' => t('created'),
        '#default_value' => $corporategiving->created,
    );
  }

  
  $form['organising_requsting_donation'] = array(
      '#type' => 'textfield',
      '#title' => t('Organising Requsting Donation'),
      '#default_value' => $corporategiving->organising_requsting_donation,
      '#required' => TRUE,
  );
  $form['date_event'] = array(
      '#title' => t('Date Of Event'),
          '#type' => 'date_popup',
            //'#required' => TRUE,
            '#date_format' => 'Y-m-d',
            '#date_year_range' => '-0:+5',
            //'#default_value' => date('Y-m-d') . ' 00:00:00',
            '#date_increment' => 4,
            '#datepicker_options' => array('minDate' => "20"),
            '#attributes' => array('autocomplete' => 'off', 'readonly' => 'readonly', 'tabindex' => '30'),
      '#required' => TRUE,
  );
  
  $form['description_event'] = array(
      '#type' => 'textarea',
      '#title' => t('Description of event and community it serves(please note if your organisation is NW based)'),
      '#default_value' => $corporategiving->description_event,
      '#required' => TRUE,
  );
   $form['goal_event'] = array(
      '#type' => 'textarea',
      '#title' => t('Goal your Event trying to Reach'),
        '#default_value' => $corporategiving->goal_event,
      '#required' => TRUE,
  );

  $form['first_name'] = array(
      '#type' => 'textfield',
      '#title' => t('first Name'),
      '#default_value' => $corporategiving->first_name,
      '#required' => TRUE,
  );

  $form['last_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Last Name'),
      '#default_value' => $corporategiving->last_name,
      '#required' => TRUE,
  );
$form['address1'] = array(
      '#type' => 'textfield',
      '#title' => t('Address'),
      '#default_value' => $corporategiving->address1,
      '#required' => TRUE,
  );
$form['address2'] = array(
      '#type' => 'textfield',
      '#title' => t('address2'),
    '#title_display' => 'invisible',
      '#default_value' => $corporategiving->address2,
//      '#required' => TRUE,
  );
$form['city'] = array(
      '#type' => 'textfield',
      '#title' => t('City'),
      '#default_value' => $corporategiving->city,
      '#required' => TRUE,
  );
$form['state'] = array(
            '#title' => t('State'),
      '#default_value' => $corporategiving->state,
    '#type' => 'select',
        '#options' => array('0' => 'yes', 1 => 'no'),
      '#required' => TRUE,
  );
$form['zipcode'] = array(
      '#type' => 'textfield',
      '#title' => t('Zip Code'),
      '#default_value' => $corporategiving->zipcode,
      '#required' => TRUE,
  );
//date_event,description_event,goal_event,first_name,last_name,address1,address2,city,state,zipcode,phone_number,mail,confirmmail,captcha,captcha_confirm
$form['phone_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone Number'),
      '#default_value' => $corporategiving->phone_number,
      '#required' => TRUE,
  );
$form['mail'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#default_value' => $corporategiving->mail,
      '#required' => TRUE,
  );

  $form['confirmmail'] = array(
      '#type' => 'textfield',
      '#title' => t('Confirm Email'),
     '#default_value' => $corporategiving->confirmmail,
      '#required' => TRUE,
  );
  $form['captcha'] = array(
      '#type' => 'textfield',
      '#title' => t('please enter the left hand side code into this box'),
     '#default_value' => $corporategiving->captcha,
      '#required' => TRUE,
  );
   $form['captcha_confirm'] = array(
      '#type' => 'textfield',
      '#title' => t('captcha'),
           '#title_display' => 'invisible',
     '#default_value' => $corporategiving->captcha_confirm,
      '#required' => TRUE,
  );
  
  field_attach_form('corporategiving', $corporategiving, $form, $form_state);
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 100,
  );
  return $form;
}

function corporategiving_page_view($entity, $view_mode = 'tweaky') {
    drupal_add_css(drupal_get_path('module', 'corporategiving') . '/corporategiving.css');
    // Our entity type, for convenience.
    $entity_type = 'corporategiving';
    // Start setting up the content.
    $entity->content = array(
        '#view_mode' => $view_mode,
    );

    // Build fields content - this is where the Field API really comes in to play.
    // The task has very little code here because it all gets taken care of by
    // field module.
    // field_attach_prepare_view() lets the fields load any data they need
    // before viewing.
    field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);
    // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
    // for us.
    entity_prepare_view($entity_type, array($entity->id => $entity));
    // Now field_attach_view() generates the content for the fields.
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);

    // OK, Field API done, now we can set up some of our own data.
    //RequestQuote Id
//  
    global $base_url;
   
    $paramshtml='';
    if(isset($_GET['corporategiving_startdate']['date']) && $_GET['corporategiving_startdate']['date']!=''){
        $paramshtml.='?corporategiving_startdate[date]='.$_GET['corporategiving_startdate']['date'];
    }
    if(isset($_GET['corporategiving_enddate']['date']) && $_GET['corporategiving_enddate']['date']!=''){
        if($paramshtml!=''){
            $paramshtml.='&corporategiving_enddate[date]='.$_GET['corporategiving_enddate']['date'];
        }else{
            $paramshtml.='?corporategiving_enddate[date]='.$_GET['corporategiving_enddate']['date'];
        }        
    }

    $html = '<div class="row-fluid"><div class="span12">'
            . '<a class="backlinkclass" style="color:#0088CC;text-decoration:none; font-size:15px;" href="' . $base_url . '/corporategivingformlist'.$paramshtml.'">Back</a>'
            .
            '</div></div>';


    $htmlcontent = array(
        '#type' => 'item',
        '#markup' => $html,
    );
    $entity->content['organising_requsting_donation'] = array(
        '#type' => 'item',
        '#title' => t('Organization requesting donation:'),
        '#markup' => $entity->organising_requsting_donation,
    );

    $entity->content['date_event'] = array(
        '#type' => 'item',
        '#title' => t('Date of Event:'),
        '#markup' => $entity->date_event,
    );
    $entity->content['description_event:'] = array(
        '#type' => 'item',
        '#title' => t('Description'),
        '#markup' => $entity->description_event,
    );
    $entity->content['goal_event'] = array(
        '#type' => 'item',
        '#title' => t('Goal your event is trying to reach:'),
        '#markup' => $entity->goal_event,
    );

    $entity->content['first_name'] = array(
        '#type' => 'item',
        '#title' => t('First Name:'),
        '#markup' => $entity->first_name,
    );

    $entity->content['last_name'] = array(
        '#type' => 'item',
        '#title' => t('Last Name:'),
        '#markup' => $entity->last_name,
    );
    $entity->content['address1'] = array(
        '#type' => 'item',
        '#title' => t('Address1:'),
        '#markup' => $entity->address1,
    );
     $entity->content['address2'] = array(
        '#type' => 'item',
        '#title' => t('Address2'),
        '#markup' => $entity->address2,
    );
    $entity->content['city'] = array(
        '#type' => 'item',
        '#title' => t('City:'),
        '#markup' => $entity->city,
    );
    $entity->content['state'] = array(
        '#type' => 'item',
        '#title' => t('State:'),
        '#markup' => $entity->state,
    );
    $entity->content['zipcode'] = array(
        '#type' => 'item',
        '#title' => t('Zipcode:'),
        '#markup' => $entity->zipcode,
    );
    $entity->content['phone_number'] = array(
        '#type' => 'item',
        '#title' => t('phone Number:'),
        '#markup' => $entity->phone_number,
    );



    $entity->content['mail'] = array(
        '#type' => 'item',
        '#title' => t('Email:'),
        '#markup' => $entity->mail,
    );


    $entity->content['created'] = array(
        '#type' => 'item',
        '#title' => t('Created Date:'),
        '#markup' => date('m-d-Y', $entity->created),
    );


    //EventType Values 
    // Now to invoke some hooks. We need the language code for
    // hook_entity_view(), so let's get that.
    global $language;
    $langcode = $language->language;
    // And now invoke hook_entity_view().
    module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
    // Now invoke hook_entity_view_alter().
    drupal_alter(array('userdocuments_view', 'entity_view'), $entity->content, $entity_type);

    // And finally return the content.
    return array($htmlcontent,$entity->content);
}

function corporategiving_add_form_submit($form, &$form_state) {
  $corporategiving_submission = (object) $form_state['values'];
  field_attach_submit('corporategiving', $corporategiving, $form, $form_state);
  $corporategiving = corporategiving_save($corporategiving_submission);
}

function corporategiving_save(&$corporategiving) {

  return entity_get_controller('corporategiving')->save($corporategiving);
}

class corporategivingController extends DrupalDefaultEntityController {

  public function save($corporategiving) {
    if (isset($corporategiving->id) && ($corporategiving->id != null)) {
      drupal_write_record('corporategiving', $corporategiving, array('id'));
      field_attach_update('corporategiving', $corporategiving);
        } else {
      drupal_write_record('corporategiving', $corporategiving);
      field_attach_insert('corporategiving', $corporategiving);
    }
    module_invoke_all('entity_insert', $corporategiving, 'corporategiving');
    
    $to = SiteConfiguration::getCorporatGiving();
        
        $params = array(
            'subject' => t('WWC Request Quote'),
            'body' => t("Data"),
            'formdata' => $corporategiving,
        );
        
        drupal_mail("email_system", "wwc_corporategiving", $to, language_default(), $params, $to);
   
   
    
    
    
    return $corporategiving;
  }

}
