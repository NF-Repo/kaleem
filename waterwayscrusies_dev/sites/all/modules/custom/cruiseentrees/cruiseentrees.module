<?php
class CruiseEntrees{
 private $id;
 private $title;


 public static function getCruiseEntreeNamebyId($id){
     try {
          $query = db_select('cruiseentrees', 'c');
  $query->condition('id', $id, '=');
  $query->fields('c', array('title'));
  $result=$query->execute()->fetchField();
  return $result;
     } catch (Exception $ex) {

     }
 
 }
}


/**
 * Implements hook_menu().
 */
function cruiseentrees_menu() {
  //Admin Management for Request Quote

  $items['cruiseentrees'] = array(
      'title' => 'Cruise Entrees',
      'page callback' => 'cruiseentrees_list_view',
      'access arguments' => array('view cruiseentrees entities'),
  );

  $items['admin/structure/cruiseentrees/manage'] = array(
      'title' => 'Cruise Entrees',
      'description' => 'Manage Cruise Entrees System Structure',
      'page callback' => 'cruiseentrees_admin_page',
      'access arguments' => array('administer cruiseentrees entities'),
  );

  //Detailed View for Entress
  $items['cruiseentrees/%cruiseentrees'] = array(
      'title callback' => 'cruiseentrees_page_title',
      'title arguments' => array(1),
      'page callback' => 'cruiseentrees_page_view',
      'page arguments' => array(1),
      'access arguments' => array('view cruiseentrees entities'),
      'type' => MENU_CALLBACK,
  );


  
  $items['cruiseentrees/%cruiseentrees/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );


  
  $items['cruiseentrees/%cruiseentrees/edit'] = array(
      'title' => 'Edit Cruise Entree',
      'load arguments' => array('cruiseentrees'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'cruiseentrees_item_edit',
      'access arguments' => array('edit cruiseentrees entities'),
      'page arguments' => array(1),
  );
  
  
  $items['cruiseentrees/%/delete'] = array(
  		'title' => 'Delete Cruise Entree',
   		'page callback' => 'cruiseentrees_item_delete',
  		'access arguments' => array('delete cruiseentrees entities'),
  		'page arguments' => array(1),
  );
  
  

  
  $items['cruiseentrees/add'] = array(
      'title' => 'Add Cruise Entree',
      'page callback' => 'cruiseentrees_add',
      'access arguments' => array('create cruiseentrees entities'),
  );

  return $items;
}


function cruiseentrees_item_delete($id){
	$path='cruiseentrees';
	$msg='';
	try{
		db_delete('cruiseentrees')
		->condition('id', $id, '=')
		->execute();
		$msg='Cruise entree deleted successfully';
	}catch(Exception $e){
		$msg='Cruise entree deletion failed';
	}
	//$t=entity_get_controller('ticketordercomments')->delete($id);
	drupal_set_message($msg);
	drupal_goto($path);
}




/**
 * Implements hook_permission().
 */
function cruiseentrees_permission() {
  return array(
      'administer cruiseentrees entities' => array(
          'title' => t('Administer Cruise Entress Entities'),
          'restrict access' => TRUE,
      ),
  		
      'view cruiseentrees entities' => array(
          'title' => t('View Cruise Entress Entities'),
      ),
      
      'edit cruiseentrees entities' => array(
          'title' => t('Edit Cruise Entress Entities'),
      ),
      
      
      'delete cruiseentrees entities' => array(
          'title' => t('Delete Cruise Entress Entities'),
      ),
      
      'create cruiseentrees entities' => array(
          'title' => t('Create Cruise Entress Entities'),
      ),
  );
}

/**
 * Implements hook_entity_info().
 */
function cruiseentrees_entity_info() {
  $cruiseentrees_info['cruiseentrees'] = array(
      'label' => t('Cruise Entrees'),
      'controller class' => 'cruiseentreesController',
      'base table' => 'cruiseentrees',
      'uri callback' => 'cruiseentrees_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
      ),
      'static cache' => TRUE,
      'bundles' => array(
          'cruiseentrees_bundle' => array(
              'label' => 'cruiseentrees',
              'admin' => array(
                  'path' => 'admin/structure/cruiseentrees/manage',
                  'access arguments' => array('administer cruiseentrees entities'),
              ),
          ),
      ),
      'view modes' => array(
          'full' => array(
              'label' => t('Full'),
              'custom settings' => FALSE,
          ),
      )
  );
  return $cruiseentrees_info;
}

function cruiseentrees_page_title($cruiseentrees) {
  return 'Entress';
}

function cruiseentrees_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $cruiseentrees = cruiseentrees_load_multiple($ids, array(), $reset);
  return $cruiseentrees ? reset($cruiseentrees) : FALSE;
}

function cruiseentrees_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('cruiseentrees', $ids, $conditions, $reset);
}

function cruiseentrees_uri($basic) {
  return array(
      'path' => 'cruiseentrees/' . $cruiseentrees->id,
  );
}

function cruiseentrees_admin_page() {
//   $output = 'Admin page for cruiseentrees entities.<br/>';
  //There is no cruiseentrees add system
  
	
  //$output = '';
  //$output .= '<a href='.base_path().'cruiseentrees/add>Add Entree</a>';
    
  $output .= cruiseentrees_list_view();
  return $output;
}

//List View

/**
 * Returns a render array with all userdocuments entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function cruiseentrees_list_view() {
    return drupal_get_form('cruiseentrees_list_form');
   
}


function cruiseentrees_list_form_validate($form, &$form_state){
	if ($form_state['triggering_element']['#value'] == 'Go') {
		$form_state['rebuild'] = TRUE;
		return;
	}
}




function cruiseentrees_list_form($form,&$form_state){
    
  global $user;
  global $base_url;
  
  
        if(isset($form_state['values']['entreeoption'])){
		$_SESSION ['entreeoption']=$form_state['values']['entreeoption'];
	}

	$form['entreeoption']=array(
			'#type'=>'select',
			'#options'=>drupal_map_assoc(array('All','Active','Inactive')),
			'#default_value' => isset($_SESSION['entreeoption']) ? $_SESSION['entreeoption'] : '',
			'#prefix' => '<div class="row-fluid" style="margin-bottom: 10px;"><div class="span2">',
			'#suffix' => '</div>',
			'#attributes' => array('class' => array('input-medium')),
	);

	$form['btn']=array(
			'#type'=>'submit',
			'#value'=>'Go',
			'#prefix' => '<div class="span10" style="margin-left: 0px;">',
			'#suffix' => '</div></div>',
	);
        
        
  
  $output = '';
  $output .= '<a href='.base_path().'cruiseentrees/add>Add Entree</a>';
  //$output = '';
  // Table header
  $header = array(
      array('data' => 'Id', 'field' => 'id'),
      array('data' => 'Title', 'field' => 'title'),
      array('data' => 'Actions'),
      array('data' => 'Status'),
      
  );
  // Setting the sort conditions
  if (isset ( $_GET ['sort'] ) && isset ( $_GET ['order'] )) {
  	if ($_GET ['sort'] == 'asc')
  		$sort = 'ASC';
  	else
  		$sort = 'DESC';
  
  	switch ($_GET ['order']) {
  		case 'Id' :
  			$order = 'id';
  			break;
  		case 'Title' :
  			$order = 'title';
  			break;
  	}
  } else {
  	$sort = 'ASC';
  	$order = 'id';
  }
  
  


  $query = db_select("cruiseentrees", "n");

  // Adding fields
  $query->fields('n', array('id', 'title','entree_status'));

  // Set order by
  $query->orderBy($order, $sort);
  // Pagination
  $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);
  
  if(isset($_SESSION['entreeoption'])){
  	if($_SESSION['entreeoption']=='Active'){
  		$query->condition('entree_status','1','=');
  	}else if($_SESSION['entreeoption']=='Inactive'){
  		$query->condition('entree_status','0','=');
  	}
  }
        
        
        
  // Executing query
  $result = $query->execute();
//    $pageurl = drupal_get_destination();
  // Looping for filling the table rows

  while ($data = $result->fetchObject()) {
      $status=($data->entree_status==1) ? "checked" : "unchecked";
    // Adding the rows
    $rows[] = array(
        $data->id,
        $data->title,
    		
    		'<a href="' . $base_url . '/cruiseentrees/' . $data->id . '/edit">Edit |</a>
                <a href="' . $base_url . '/cruiseentrees/' . $data->id . '/delete">Delete</a>',
                '<input type="checkbox"'.$status.' disabled="disabled">',
        
        
    );
  }
  //Setting the output of the field
  $output .= theme_table(
                  array(
                      'header' => $header,
                      'rows' => $rows,
                      'attributes' => array('class' => array('')),
                      'sticky' => true,
                      'caption' => '',
                      'colgroups' => array(),
                      'empty' => t("No Records!") //The message to be displayed if table is empty
                  )
          ) . theme('pager');



  //return $output;
  
  $form['outputmarkup'] = array(
			'#type' => 'markup',
						'#markup'=>$output
	);
	return $form;
    
}
        
        
        

//end of List_view
//Entity page view

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function cruiseentrees_page_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'cruiseentrees';
  // Start setting up the content.
  $entity->content = array(
      '#view_mode' => $view_mode,
  );

  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->id => $entity), $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  //RequestQuote Id
  $entity->content['id'] = array(
      '#type' => 'item',
      '#title' => t('id'),
      '#markup' => $entity->id,
  );

  
  
  
  $entity->content['title'] = array(
      '#type' => 'item',
      '#title' => t('Title'),
      '#markup' => $entity->title,
  );

  $entity->content['ordering'] = array(
      '#type' => 'item',
      '#title' => t('ordering'),
      '#markup' => $entity->ordering,
  );

  //EventType Values 
  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  

  // And finally return the content.
  return $entity->content;
}

//Entity Page view gets 

function cruiseentrees_item_edit($cruiseentrees) {

  drupal_set_title(t('Edit Cruise Entree @title', array('@title' =>
      '')), PASS_THROUGH);
  return drupal_get_form('cruiseentrees_add_form', $cruiseentrees);
}

function cruiseentrees_add() {
  $cruiseentrees = (object) array(
      	'title'=>'',
  		'ordering'=>'',
  		
  		'created' => REQUEST_TIME
  );

  return drupal_get_form('cruiseentrees_add_form', $cruiseentrees);
}

function cruiseentrees_add_form($form, &$form_state, $cruiseentrees) {
	
drupal_add_css ( drupal_get_path ( 'module', 'cruiseentrees' ) . '/cruiseentrees.css' );

  if (isset($cruiseentrees->id) && ($cruiseentrees->id != null)) {
    $form['id'] = array(
        '#type' => 'hidden',
        '#title' => t('id'),
        '#default_value' => $cruiseentrees->id,
        '#required' => TRUE,
    );
  }
  else {
    $form['created'] = array(
        '#type' => 'hidden',
        '#title' => t('created'),
        '#default_value' => $cruiseentrees->created,
    );
  }

 
  
  $categories=getEnhancementcategories();
  
  
  
  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => $cruiseentrees->title,
      '#required' => TRUE,
  );
  
  
  $form['entree_status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Active'),
        '#default_value' => isset($cruiseentrees->entree_status) ? $cruiseentrees->entree_status : ''
  );

    $form['ordering'] = array(
      '#type' => 'hidden',
      '#title' => t('Ordering'),
      '#value' => 0,//$cruiseentrees->ordering,
      '#required' => TRUE,
  );
  
  
  
   

  field_attach_form('cruiseentrees', $cruiseentrees, $form, $form_state);
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      //'#weight' => 100,
  );
  
  $form['cancel'] = array(
  		'#type' => 'button',
  		'#value' => t('Cancel'),
  		'#attributes' => array('onClick' => 'history.go(-1); return true;'),
  		'#post_render' => array('change_button_type'),
  );
  return $form;
}

function cruiseentrees_field_extra_fields() {
  $form_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  
  
  
  
  
  $form_elements['title'] = array(
      'label' => t('Title'),
      'description' => t('title (an extra form field)'),
      'weight' => -5,
  );
  $form_elements['ordering'] = array(
      'label' => t('ordering'),
      'description' => t('ordering (an extra form field)'),
      'weight' => -5,
  );
  
   

  $display_elements['id'] = array(
      'label' => t('id'),
      'description' => t('id (an extra form field)'),
      'weight' => -5,
  );
  //Booking Date
  
  
  $display_elements['title'] = array(
      'label' => t('Title'),
      'description' => t('title (an extra form field)'),
      'weight' => -5,
  );
  $display_elements['ordering'] = array(
      'label' => t('ordering'),
      'description' => t('ordering (an extra form field)'),
      'weight' => -5,
  );
  


  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['cruiseentrees']['cruiseentrees_bundle']['form'] = $form_elements;
  $extra_fields['cruiseentrees']['cruiseentrees_bundle']['display'] = $display_elements;

  return $extra_fields;
}

function cruiseentrees_add_form_validate($form, &$form_state) {
  $cruiseentrees_submission = (object) $form_state['values'];
  field_attach_form_validate('cruiseentrees', $cruiseentrees_submission, $form, $form_state);
}

function cruiseentrees_add_form_submit($form, &$form_state) {
  $cruiseentreesobj = (object) $form_state['values'];
  
  $msg='';
  $path='cruiseentrees';
  if(isset($cruiseentreesobj->id)){
  	$msg='Cruise entree updated successfully';
  }else{
  	$msg='Cruise entree created successfully';
  }
  
  
  //creating the cruise entrees obejct
  field_attach_submit('cruiseentrees', $cruiseentreesobj, $form, $form_state);
  $cruiseentrees = cruiseentrees_save($cruiseentreesobj);
  
  if($cruiseentrees){
 	// 	
  }else{
  	$msg="Operation failed";
  }
  drupal_set_message($msg);
  drupal_goto($path);
  
  
  
  //$form_state['redirect'] = 'cruiseentrees/' . $cruiseentrees->id;
}

function cruiseentrees_save(&$cruiseentrees) {

  return entity_get_controller('cruiseentrees')->save($cruiseentrees);
  
  
}

/**
 * 
 * 
 * 
 * @author LSN37
 *
 */
function getEntreeslist()
{
	$output=array();
	$result = db_select('cruiseentrees', 'ce')
	->condition('ce.entree_status','1','=')
	->fields('ce')
	
	->execute();
	foreach ($result as $ticket)
	{
		$output[]=$ticket;
	}
	return $output;
}


/**
 * 
 * 
 * 
 */
function getActiveCruiseEntreesList()
{
  $query=  db_select('cruiseentrees','ce');
  $query->fields('ce');
  $query->condition('ce.entree_status',1,'=');
  $result=$query->execute();
  $entreeresults=array();
  foreach ($result as $entree) {
   
    $entreeresults[$entree->id]=$entree->title;
  }
  return $entreeresults; 
}
/**
 * 
 * 
 * 
 * 
 * @author LSN37
 *
 */

function getEntreelistbyTicket($ticketid)
{
	//based on ticketid we are getting the entreelist
	
	$output=array();
	$result = db_select('ticket_entrees', 'te')
	->fields('te')
	->condition('ticketid', $ticketid,'=')

	
	->execute();
	foreach ($result as $ticket)
	{
		$output[]=$ticket->entreeid;
	}
	return $output;
	
	
	
}



class cruiseentreesController extends DrupalDefaultEntityController {

  public function save($cruiseentrees) {
    if (isset($cruiseentrees->id) && ($cruiseentrees->id != null)) {
      drupal_write_record('cruiseentrees', $cruiseentrees, array('id'));
      field_attach_update('cruiseentrees', $cruiseentrees);
    }
    else {
      drupal_write_record('cruiseentrees', $cruiseentrees);
      field_attach_insert('cruiseentrees', $cruiseentrees);
    }
    module_invoke_all('entity_insert', $cruiseentrees, 'cruiseentrees');
        return $cruiseentrees;
  }
  
  
}
